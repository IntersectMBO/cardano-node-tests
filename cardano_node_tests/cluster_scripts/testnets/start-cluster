#!/usr/bin/env bash

set -Eeuo pipefail
trap 'echo "Error at line $LINENO"' ERR

TESTNET_DIR="${1:?"Testnet dir needed"}"
SCRIPT_DIR="$(readlink -m "${0%/*}")"
SOCKET_PATH="$(readlink -m "$CARDANO_NODE_SOCKET_PATH")"
STATE_CLUSTER="${SOCKET_PATH%/*}"
STATE_CLUSTER_NAME="${STATE_CLUSTER##*/}"
SUPERVISORD_SOCKET_PATH="${STATE_CLUSTER}/supervisord.sock"
START_CLUSTER_LOG="${STATE_CLUSTER}/start-cluster.log"

INSTANCE_NUM="%%INSTANCE_NUM%%"
if [[ "$SOCKET_PATH" != *"/state-cluster${INSTANCE_NUM}/"* ]]; then
  echo "CARDANO_NODE_SOCKET_PATH must be set to a path containing 'state-cluster${INSTANCE_NUM}', line $LINENO" >&2
  exit 1
fi

if [ -f "$STATE_CLUSTER/supervisord.pid" ]; then
  echo "Cluster already running. Please run \`$SCRIPT_DIR/stop-cluster\` first!" >&2
  exit 1
fi

if [ -e "$SCRIPT_DIR/shell_env" ]; then
  # shellcheck disable=SC1090,SC1091
  source "$SCRIPT_DIR/shell_env"
fi

get_address_balance() {
  local txhash txix amount total_amount _

  # Repeat in case `query utxo` fails
  for _ in {1..3}; do
    total_amount=0
    while read -r txhash txix amount _; do
      if [ -z "$txhash" ] || [ -z "$txix" ]; then
        continue
      fi
      total_amount="$((total_amount + amount))"
    done <<< "$(cardano-cli latest query utxo "$@" --output-text | grep " lovelace")"

    if [ "$total_amount" -gt 0 ]; then
      break
    fi
  done

  echo "$total_amount"
}

rm -rf "$STATE_CLUSTER"
mkdir -p "$STATE_CLUSTER"/{byron,shelley,webserver}
cd "$STATE_CLUSTER/.."

TESTNET_CONF_DIR="$TESTNET_DIR"
if [ -e "$SCRIPT_DIR/testnet_conf" ]; then
  TESTNET_CONF_DIR="$SCRIPT_DIR/testnet_conf"
fi

# copy faucet address and keys
cp "$TESTNET_DIR"/shelley/faucet.* "$STATE_CLUSTER/shelley"
[ -e "$STATE_CLUSTER/shelley/faucet.addr" ] || \
  { echo "The \`$STATE_CLUSTER/shelley/faucet.addr\` not found, line $LINENO" >&2; exit 1; }  # assert
[ -e "$STATE_CLUSTER/shelley/faucet.vkey" ] || \
  { echo "The \`$STATE_CLUSTER/shelley/faucet.vkey\` not found, line $LINENO" >&2; exit 1; }  # assert
[ -e "$STATE_CLUSTER/shelley/faucet.skey" ] || \
  { echo "The \`$STATE_CLUSTER/shelley/faucet.skey\` not found, line $LINENO" >&2; exit 1; }  # assert

# copy configuration files
cp "$SCRIPT_DIR"/cardano-node-* "$STATE_CLUSTER"
cp "$SCRIPT_DIR/run-cardano-submit-api" "$STATE_CLUSTER"
cp "$SCRIPT_DIR/supervisor.conf" "$STATE_CLUSTER"
cp "$TESTNET_CONF_DIR/topology-relay1.json" "$STATE_CLUSTER"
cp "$TESTNET_CONF_DIR"/genesis-*.json "$STATE_CLUSTER"
ln -rs "$STATE_CLUSTER/genesis-byron.json" "$STATE_CLUSTER/byron/genesis.json"
ln -rs "$STATE_CLUSTER/genesis-shelley.json" "$STATE_CLUSTER/shelley/genesis.json"
ln -rs "$STATE_CLUSTER/genesis-alonzo.json" "$STATE_CLUSTER/shelley/genesis.alonzo.json"
ln -rs "$STATE_CLUSTER/genesis-conway.json" "$STATE_CLUSTER/shelley/genesis.conway.json"

NETWORK_MAGIC="$(jq '.networkMagic' "$STATE_CLUSTER/shelley/genesis.json")"

# edit port numbers in configuration
RELAY1_EKG="%%EKG_PORT_RELAY1%%"
RELAY1_PROMETHEUS="%%PROMETHEUS_PORT_RELAY1%%"
jq --arg ekg "$RELAY1_EKG" --arg prometheus "$RELAY1_PROMETHEUS" \
  '.hasEKG = ($ekg|tonumber) | .hasPrometheus[1] = ($prometheus|tonumber)' \
  "$TESTNET_CONF_DIR/config-relay1.json" > "$STATE_CLUSTER/config-relay1.json"
chmod u+w "$STATE_CLUSTER"/config-*.json

cat >> "${STATE_CLUSTER}/supervisor.conf" <<EoF

[unix_http_server]
file = ${SUPERVISORD_SOCKET_PATH}

[supervisorctl]
serverurl = unix:///${SUPERVISORD_SOCKET_PATH}
EoF

# enable db-sync service
if [ -n "${DBSYNC_REPO:-""}" ]; then
  [ -e "$DBSYNC_REPO/db-sync-node/bin/cardano-db-sync" ] || \
    { echo "The \`$DBSYNC_REPO/db-sync-node/bin/cardano-db-sync\` not found, line $LINENO" >&2; exit 1; }  # assert

  # copy db-sync config file
  cp "$TESTNET_CONF_DIR/dbsync-config.yaml" "$STATE_CLUSTER/dbsync-config.yaml"

  # copy db-sync state
  cp -r "$TESTNET_DIR/db-sync" "$STATE_CLUSTER/db-sync"

  cat >> "$STATE_CLUSTER/supervisor.conf" <<EoF

[program:dbsync]
command=$SCRIPT_DIR/run-cardano-dbsync
stderr_logfile=./$STATE_CLUSTER_NAME/dbsync.stderr
stdout_logfile=./$STATE_CLUSTER_NAME/dbsync.stdout
autostart=false
autorestart=false
startsecs=5
EoF
fi

# enable cardano-submit-api service
if command -v cardano-submit-api >/dev/null 2>&1 && [ -e "$TESTNET_CONF_DIR/submit-api-config.json" ]; then
  # copy cardano-submit-api config file
  cp "$TESTNET_CONF_DIR/submit-api-config.json" "$STATE_CLUSTER/submit-api-config.json"

  cat >> "$STATE_CLUSTER/supervisor.conf" <<EoF

[program:submit_api]
command=$SCRIPT_DIR/run-cardano-submit-api
stderr_logfile=./$STATE_CLUSTER_NAME/submit_api.stderr
stdout_logfile=./$STATE_CLUSTER_NAME/submit_api.stdout
autostart=false
autorestart=false
startsecs=5
EoF
fi

# create scripts for cluster starting / stopping
printf "#!/bin/sh\n\nsupervisorctl -s unix:///%s start all" "$SUPERVISORD_SOCKET_PATH" > "${STATE_CLUSTER}/supervisorctl_start"
printf "#!/bin/sh\n\nsupervisorctl -s unix:///%s \"\$@\"" "$SUPERVISORD_SOCKET_PATH" > "${STATE_CLUSTER}/supervisorctl"

cat > "$STATE_CLUSTER/supervisord_start" <<EoF
#!/usr/bin/env bash

set -uo pipefail

SCRIPT_DIR="\$(readlink -m "\${0%/*}")"

cd "\$SCRIPT_DIR/.."

supervisord --config "\$SCRIPT_DIR/supervisor.conf"
EoF

cat > "$STATE_CLUSTER/supervisord_stop" <<EoF
#!/usr/bin/env bash

set -uo pipefail

SCRIPT_DIR="\$(readlink -m "\${0%/*}")"
PID_FILE="\$SCRIPT_DIR/supervisord.pid"

supervisorctl -s unix:///${SUPERVISORD_SOCKET_PATH} stop all

if [ ! -f "\$PID_FILE" ]; then
  echo "Cluster is not running!"
  exit 0
fi

PID="\$(<"\$PID_FILE")"
for _ in {1..5}; do
  if ! kill "\$PID"; then
    break
  fi
  sleep 1
  if [ ! -f "\$PID_FILE" ]; then
    break
  fi
done

rm -f "\$PID_FILE"
echo "Cluster terminated!"
EoF

chmod u+x "$STATE_CLUSTER"/{supervisorctl*,supervisord_*}

# copy db
cp -r "$TESTNET_DIR/relay1-db" "$STATE_CLUSTER/db-relay1"

supervisord --config "$STATE_CLUSTER/supervisor.conf"

echo "Waiting until replay is finished"
sleep 10
while tail -n 10 "$STATE_CLUSTER/relay1.stdout" | grep -E -q "replay progress|IPSubscriptionTarget"; do
  sleep 10
done

for _ in {1..10}; do
  if [ -S "$CARDANO_NODE_SOCKET_PATH" ]; then
    break
  fi
  echo "Waiting 5 seconds for relay node to start"
  sleep 5
done
[ -S "$CARDANO_NODE_SOCKET_PATH" ] || { echo "Failed to start the relay node, line $LINENO" >&2; exit 1; }  # assert

echo "Waiting to make sure the chain is synced"
for _ in {1..600}; do
  sync_progress="$(cardano-cli query tip --testnet-magic "$NETWORK_MAGIC" | jq -r '.syncProgress')"
  if [ "$sync_progress" = "100.00" ]; then
    break
  fi
  sleep 30
done
[ "$sync_progress" = "100.00" ] || { echo "Failed to sync the realy node, line $LINENO" >&2; exit 1; }  # assert

# start cardano-submit-api
if command -v cardano-submit-api >/dev/null 2>&1 && [ -e "$STATE_CLUSTER/submit-api-config.json" ]; then
  echo "Starting cardano-submit-api"
  supervisorctl -s "unix:///${SUPERVISORD_SOCKET_PATH}" start submit_api
fi

# start db-sync
if [ -n "${DBSYNC_REPO:-""}" ]; then
  echo "Starting db-sync"
  supervisorctl -s "unix:///${SUPERVISORD_SOCKET_PATH}" start dbsync
  sleep 10

  echo "Waiting to make sure db-sync is synced"
  for _ in {1..600}; do
    node_block="$(cardano-cli query tip --testnet-magic "$NETWORK_MAGIC" | jq '.block')"
    sleep 5
    dbsync_block="$("$SCRIPT_DIR/dbsync_block_no.sh")"
    if [ "$node_block" -le "$dbsync_block" ]; then
      break
    fi
    sleep 60
  done
fi

faucet_init_balance="$(get_address_balance \
  --testnet-magic "$NETWORK_MAGIC" \
  --address "$(<"$STATE_CLUSTER/shelley/faucet.addr")")"
echo "Faucet initial balance: $faucet_init_balance" >> "$START_CLUSTER_LOG"

echo "Cluster started. Run \`$SCRIPT_DIR/stop-cluster\` to stop"
