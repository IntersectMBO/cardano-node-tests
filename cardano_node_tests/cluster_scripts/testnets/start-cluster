#!/usr/bin/env bash

set -euo pipefail

TESTNET_DIR="${1:?"Testnet dir needed"}"
SCRIPT_DIR="$(readlink -m "${0%/*}")"
SOCKET_PATH="$(readlink -m "$CARDANO_NODE_SOCKET_PATH")"
STATE_CLUSTER="${SOCKET_PATH%/*}"

if [ -f "$STATE_CLUSTER/supervisord.pid" ]; then
  echo "Cluster already running. Please run \`stop-cluster\` first!" >&2
  exit 1
fi

cardano_cli_log() {
  echo cardano-cli "$@" >> "$STATE_CLUSTER/start_cluster_cmds.log"
  cardano-cli "$@"
}

if [ -e "$SCRIPT_DIR/shell_env" ]; then
  # shellcheck disable=SC1090,SC1091
  source "$SCRIPT_DIR/shell_env"
fi

rm -rf "$STATE_CLUSTER"
mkdir -p "$STATE_CLUSTER"/{byron,shelley,webserver,nodes}
cd "$STATE_CLUSTER/.."

TESTNET_CONF_DIR="$TESTNET_DIR"
if [ -e "$SCRIPT_DIR/testnet_conf" ]; then
  TESTNET_CONF_DIR="$SCRIPT_DIR/testnet_conf"
fi

# copy faucet address and keys
cp "$TESTNET_DIR"/shelley/faucet.* "$STATE_CLUSTER/shelley"
cp -r "$TESTNET_DIR"/nodes/* "$STATE_CLUSTER/nodes"

# copy and edit configuration
cp "$SCRIPT_DIR"/cardano-node-* "$STATE_CLUSTER"
cp "$SCRIPT_DIR"/topology-pool*.json "$STATE_CLUSTER"
cp "$SCRIPT_DIR/supervisor.conf" "$STATE_CLUSTER"
cp "$SCRIPT_DIR/deregister-pools" "$STATE_CLUSTER"
cp "$TESTNET_CONF_DIR/genesis-byron.json" "$STATE_CLUSTER/genesis-byron.json"
cp "$TESTNET_CONF_DIR/genesis-shelley.json" "$STATE_CLUSTER/genesis-shelley.json"
ln -rs "$STATE_CLUSTER/genesis-byron.json" "$STATE_CLUSTER/byron/genesis.json"
ln -rs "$STATE_CLUSTER/genesis-shelley.json" "$STATE_CLUSTER/shelley/genesis.json"

PRODUCER="$(jq '.Producers[0]' "$TESTNET_CONF_DIR"/topology-*.json)"
jq --argjson relay "$PRODUCER" '.Producers[2] = $relay' "$SCRIPT_DIR/topology-relay1.json" \
  > "$STATE_CLUSTER/topology-relay1.json"

# If public IP for relay is not set using `RELAY1_HOST`, try to use the external IP.
# Setting it to 'localhost' is not useful as relay will not be reachable and pools
# will not produce any blocks.
if [ -z "${RELAY1_HOST:-""}" ]; then
  RELAY1_HOST="$(curl -s "http://whatismyip.akamai.com/" || echo "")"
  [ -n "$RELAY1_HOST" ] || { echo "Empty 'RELAY1_HOST' on line $LINENO" >&2; exit 1; }  # assert
fi
RELAY1_PORT="${RELAY1_PORT:-"30001"}"
echo "$RELAY1_HOST" > "$STATE_CLUSTER/nodes/relay_host"
echo "$RELAY1_PORT" > "$STATE_CLUSTER/nodes/relay_port"

RELAY1_EKG="30300"
RELAY1_PROMETHEUS="30301"
POOL1_EKG="30306"
POOL1_PROMETHEUS="30307"
POOL2_EKG="30308"
POOL2_PROMETHEUS="30309"
jq --arg ekg "$RELAY1_EKG" --arg prometheus "$RELAY1_PROMETHEUS" \
  '.hasEKG = ($ekg|tonumber) | .hasPrometheus[1] = ($prometheus|tonumber)' \
  "$TESTNET_CONF_DIR"/config-*.json > "$STATE_CLUSTER/config-relay1.json"
jq --arg ekg "$POOL1_EKG" --arg prometheus "$POOL1_PROMETHEUS" \
  '.hasEKG = ($ekg|tonumber) | .hasPrometheus[1] = ($prometheus|tonumber)' \
  "$TESTNET_CONF_DIR"/config-*.json > "$STATE_CLUSTER/config-pool1.json"
jq --arg ekg "$POOL2_EKG" --arg prometheus "$POOL2_PROMETHEUS" \
  '.hasEKG = ($ekg|tonumber) | .hasPrometheus[1] = ($prometheus|tonumber)' \
  "$TESTNET_CONF_DIR"/config-*.json > "$STATE_CLUSTER/config-pool2.json"
chmod u+w "$STATE_CLUSTER"/config-*.json

NETWORK_MAGIC="$(jq '.networkMagic' "$STATE_CLUSTER/shelley/genesis.json")"
POOL1_PLEDGE=5000000000000
POOL2_PLEDGE=2500000000000
POOL_PLEDGES=("$POOL1_PLEDGE" "$POOL2_PLEDGE")
POOL_PORT_OFFSET=3
RAND_POOL="$((RANDOM % 100))"

SLOT_LENGTH="$(jq '.slotLength' "$STATE_CLUSTER/shelley/genesis.json")"
SLOTS_KES_PERIOD="$(jq '.slotsPerKESPeriod' "$STATE_CLUSTER/shelley/genesis.json")"
SYSTEM_START="$(jq -r '.systemStart' "$STATE_CLUSTER/shelley/genesis.json")"
SYSTEM_START_SEC="$(date -d "$SYSTEM_START" +%s)"
NOW="$(date +%s)"
KES_PERIOD="$(( ((NOW - SYSTEM_START_SEC) * SLOT_LENGTH) / SLOTS_KES_PERIOD))"

for i in {1..2}; do
  pledge_idx="$((i - 1))"
  mkdir -p "$STATE_CLUSTER/nodes/node-pool$i"
  echo "Generating Pool $i Secrets"
  if [ ! -e "$STATE_CLUSTER/nodes/node-pool$i/owner-utxo.skey" ]; then
    cardano_cli_log address key-gen \
      --signing-key-file "$STATE_CLUSTER/nodes/node-pool$i/owner-utxo.skey" \
      --verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/owner-utxo.vkey"
  fi
  if [ ! -e "$STATE_CLUSTER/nodes/node-pool$i/owner-stake.skey" ]; then
    cardano_cli_log stake-address key-gen \
      --signing-key-file "$STATE_CLUSTER/nodes/node-pool$i/owner-stake.skey" \
      --verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/owner-stake.vkey"
  fi
  # Payment addresses
  cardano_cli_log address build \
    --payment-verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/owner-utxo.vkey" \
    --stake-verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/owner-stake.vkey" \
    --testnet-magic "$NETWORK_MAGIC" \
    --out-file "$STATE_CLUSTER/nodes/node-pool$i/owner.addr"
  # Stake addresses
  cardano_cli_log stake-address build \
    --stake-verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/owner-stake.vkey" \
    --testnet-magic "$NETWORK_MAGIC" \
    --out-file "$STATE_CLUSTER/nodes/node-pool$i/owner-stake.addr"
  # Stake addresses registration certs
  cardano_cli_log stake-address registration-certificate \
    --stake-verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/owner-stake.vkey" \
    --out-file "$STATE_CLUSTER/nodes/node-pool$i/stake.reg.cert"

  # Stake reward keys
  cardano_cli_log stake-address key-gen \
    --signing-key-file "$STATE_CLUSTER/nodes/node-pool$i/reward.skey" \
    --verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/reward.vkey"
  # Stake reward addresses registration certs
  cardano_cli_log stake-address registration-certificate \
    --stake-verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/reward.vkey" \
    --out-file "$STATE_CLUSTER/nodes/node-pool$i/stake-reward.reg.cert"
  if [ ! -e "$STATE_CLUSTER/nodes/node-pool$i/cold.skey" ]; then
    cardano_cli_log node key-gen \
      --cold-verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/cold.vkey" \
      --cold-signing-key-file "$STATE_CLUSTER/nodes/node-pool$i/cold.skey" \
      --operational-certificate-issue-counter-file "$STATE_CLUSTER/nodes/node-pool$i/cold.counter"
  fi
  cardano_cli_log node key-gen-KES \
    --verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/kes.vkey" \
    --signing-key-file "$STATE_CLUSTER/nodes/node-pool$i/kes.skey"
  cardano_cli_log node key-gen-VRF \
    --verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/vrf.vkey" \
    --signing-key-file "$STATE_CLUSTER/nodes/node-pool$i/vrf.skey"

  # Stake address delegation certs
  cardano_cli_log stake-address delegation-certificate \
    --stake-verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/owner-stake.vkey" \
    --cold-verification-key-file  "$STATE_CLUSTER/nodes/node-pool$i/cold.vkey" \
    --out-file "$STATE_CLUSTER/nodes/node-pool$i/owner-stake.deleg.cert"

  cardano_cli_log node issue-op-cert \
    --kes-period "$KES_PERIOD" \
    --cold-signing-key-file "$STATE_CLUSTER/nodes/node-pool$i/cold.skey" \
    --kes-verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/kes.vkey" \
    --operational-certificate-issue-counter-file "$STATE_CLUSTER/nodes/node-pool$i/cold.counter" \
    --out-file "$STATE_CLUSTER/nodes/node-pool$i/op.cert"

  POOL_NAME="TestPool${RAND_POOL}_${i}"
  POOL_DESC="Test Pool $RAND_POOL $i"
  POOL_TICKER="TP${RAND_POOL}${i}"

  cat > "$STATE_CLUSTER/webserver/pool$i.html" <<EoF
<!DOCTYPE html>
<html>
<head>
<title>$POOL_NAME</title>
</head>
<body>
name: <strong>$POOL_NAME</strong><br>
description: <strong>$POOL_DESC</strong><br>
ticker: <strong>$POOL_TICKER</strong><br>
</body>
</html>
EoF

  echo "Generating Pool $i Metadata"
  jq -n \
    --arg name "$POOL_NAME" \
    --arg description "$POOL_DESC" \
    --arg ticker "$POOL_TICKER" \
    --arg homepage "http://${RELAY1_HOST}:30000/pool$i.html" \
    '{"name": $name, "description": $description, "ticker": $ticker, "homepage": $homepage}' \
    > "$STATE_CLUSTER/webserver/pool$i.json"

  METADATA_URL="http://${RELAY1_HOST}:30000/pool$i.json"
  METADATA_HASH=$(cardano_cli_log stake-pool metadata-hash --pool-metadata-file \
                  "$STATE_CLUSTER/webserver/pool$i.json")
  POOL_PORT=$(("30000" + "$POOL_PORT_OFFSET" + i))
  POOL_COST="$(jq '.protocolParams.minPoolCost' "$STATE_CLUSTER/shelley/genesis.json")"
  echo "$POOL_PORT" > "$STATE_CLUSTER/nodes/node-pool$i/port"
  echo "${POOL_PLEDGES[$pledge_idx]}" > "$STATE_CLUSTER/nodes/node-pool$i/pledge"

  cardano_cli_log stake-pool registration-certificate \
    --cold-verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/cold.vkey" \
    --vrf-verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/vrf.vkey" \
    --pool-pledge "${POOL_PLEDGES[$pledge_idx]}" \
    --pool-margin 0.35 \
    --pool-cost "$POOL_COST" \
    --pool-reward-account-verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/reward.vkey" \
    --pool-owner-stake-verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/owner-stake.vkey" \
    --metadata-url "$METADATA_URL" \
    --metadata-hash "$METADATA_HASH" \
    --pool-relay-port "$RELAY1_PORT" \
    --pool-relay-ipv4 "$RELAY1_HOST" \
    --testnet-magic "$NETWORK_MAGIC" \
    --out-file "$STATE_CLUSTER/nodes/node-pool$i/register.cert"
done

# create scripts for cluster starting / stopping
printf "#!/bin/sh\n\nsupervisorctl start all" > "$STATE_CLUSTER/supervisorctl_start"
printf "#!/bin/sh\n\nsupervisorctl stop all" > "$STATE_CLUSTER/supervisorctl_stop"
printf "#!/bin/sh\n\nsupervisord --config %s/supervisor.conf" "$STATE_CLUSTER" \
  > "$STATE_CLUSTER/supervisord_start"
chmod u+x "$STATE_CLUSTER"/{supervisorctl_st*,supervisord_start}

# copy db
for n in db-pool1 db-pool2 db-relay1; do
  cp -r "$TESTNET_DIR/node1-db" "$STATE_CLUSTER/$n"
done

supervisord --config "$STATE_CLUSTER/supervisor.conf"

echo "waiting for node to start" >> "$STATE_CLUSTER/start-cluster.log"
for _ in {1..5}; do
  if [ -S "$CARDANO_NODE_SOCKET_PATH" ]; then
    break
  fi
  echo "Waiting 5 seconds for relay node to start"
  sleep 5
done
[ -S "$CARDANO_NODE_SOCKET_PATH" ] || { echo "Failed to start the relay node, line $LINENO" >&2; exit 1; }  # assert
echo "node started" >> "$STATE_CLUSTER/start-cluster.log"

echo "Waiting to make sure the chain is synced"
echo "waiting for chain to sync" >> "$STATE_CLUSTER/start-cluster.log"
while :; do
  start_slot="$(cardano-cli query tip --testnet-magic "$NETWORK_MAGIC" | jq '.slot')"
  sleep 30
  end_slot="$(cardano-cli query tip --testnet-magic "$NETWORK_MAGIC" | jq '.slot')"
  if [ "$start_slot" -ne "$end_slot" ] && [ "$((end_slot - start_slot))" -lt 100 ]; then
    break
  fi
  sleep 5
done
echo "chain synced" >> "$STATE_CLUSTER/start-cluster.log"

echo "Transfering funds to pool owners, registering pools and delegations"

# Tranfer funds, register pools and delegations, all in one big transaction:

cardano_cli_log query protocol-parameters \
  --testnet-magic "$NETWORK_MAGIC" \
  --out-file "$STATE_CLUSTER/pparams.json"

TXIN_ADDR="$(<"$STATE_CLUSTER"/shelley/faucet.addr)"
DEPOSITS="$(jq '.protocolParams.poolDeposit + (2 * .protocolParams.keyDeposit)' \
  "$STATE_CLUSTER/shelley/genesis.json")"
NEEDED_AMOUNT="$(( POOL1_PLEDGE + POOL2_PLEDGE + (DEPOSITS * 2) ))"
FEE_BUFFER=1000000000000
STOP_TXIN_AMOUNT="$((NEEDED_AMOUNT + FEE_BUFFER))"

TXINS=()
TXIN_COUNT=0
TXIN_AMOUNT=0
while read -r txhash txix amount _; do
  TXIN_AMOUNT="$((TXIN_AMOUNT + amount))"
  TXIN_COUNT="$((TXIN_COUNT + 1))"
  TXINS+=("--tx-in" "${txhash}#${txix}")
  if [ "$TXIN_AMOUNT" -ge "$STOP_TXIN_AMOUNT" ]; then
    break
  fi
done <<< "$(cardano_cli_log query utxo --testnet-magic \
            "$NETWORK_MAGIC" \
            --address "$TXIN_ADDR" |
            grep -E "lovelace$|[0-9]$")"

TTL="$(cardano_cli_log query tip --testnet-magic "$NETWORK_MAGIC" | jq '.slot + 1000')"

cardano_cli_log transaction build-raw \
  --ttl    "$TTL" \
  --fee    0 \
  "${TXINS[@]}" \
  --tx-out "$TXIN_ADDR+0" \
  --tx-out "$(<"$STATE_CLUSTER/nodes/node-pool1/owner.addr")+$POOL1_PLEDGE" \
  --certificate-file "$STATE_CLUSTER/nodes/node-pool1/stake.reg.cert" \
  --certificate-file "$STATE_CLUSTER/nodes/node-pool1/stake-reward.reg.cert" \
  --certificate-file "$STATE_CLUSTER/nodes/node-pool1/register.cert" \
  --certificate-file "$STATE_CLUSTER/nodes/node-pool1/owner-stake.deleg.cert" \
  --tx-out "$(<"$STATE_CLUSTER/nodes/node-pool2/owner.addr")+$POOL2_PLEDGE" \
  --certificate-file "$STATE_CLUSTER/nodes/node-pool2/stake.reg.cert" \
  --certificate-file "$STATE_CLUSTER/nodes/node-pool2/stake-reward.reg.cert" \
  --certificate-file "$STATE_CLUSTER/nodes/node-pool2/register.cert" \
  --certificate-file "$STATE_CLUSTER/nodes/node-pool2/owner-stake.deleg.cert" \
  --out-file "$STATE_CLUSTER/shelley/transfer-register-delegate-fee-tx.txbody"

FEE="$(cardano_cli_log transaction calculate-min-fee \
        --testnet-magic "$NETWORK_MAGIC" \
        --protocol-params-file "$STATE_CLUSTER"/pparams.json \
        --tx-in-count "$TXIN_COUNT" \
        --tx-out-count 3 \
        --witness-count 9 \
        --byron-witness-count 0 \
        --tx-body-file "$STATE_CLUSTER/shelley/transfer-register-delegate-fee-tx.txbody" |
        cut -d' ' -f1)"

TXOUT_AMOUNT="$((TXIN_AMOUNT - FEE - NEEDED_AMOUNT))"

cardano_cli_log transaction build-raw \
  --ttl    "$TTL" \
  --fee    "$FEE" \
  "${TXINS[@]}" \
  --tx-out "$TXIN_ADDR+$TXOUT_AMOUNT" \
  --tx-out "$(<"$STATE_CLUSTER/nodes/node-pool1/owner.addr")+$POOL1_PLEDGE" \
  --certificate-file "$STATE_CLUSTER/nodes/node-pool1/stake.reg.cert" \
  --certificate-file "$STATE_CLUSTER/nodes/node-pool1/stake-reward.reg.cert" \
  --certificate-file "$STATE_CLUSTER/nodes/node-pool1/register.cert" \
  --certificate-file "$STATE_CLUSTER/nodes/node-pool1/owner-stake.deleg.cert" \
  --tx-out "$(<"$STATE_CLUSTER/nodes/node-pool2/owner.addr")+$POOL2_PLEDGE" \
  --certificate-file "$STATE_CLUSTER/nodes/node-pool2/stake.reg.cert" \
  --certificate-file "$STATE_CLUSTER/nodes/node-pool2/stake-reward.reg.cert" \
  --certificate-file "$STATE_CLUSTER/nodes/node-pool2/register.cert" \
  --certificate-file "$STATE_CLUSTER/nodes/node-pool2/owner-stake.deleg.cert" \
  --out-file         "$STATE_CLUSTER/shelley/transfer-register-delegate-tx.txbody"

cardano_cli_log transaction sign \
  --signing-key-file "$STATE_CLUSTER/nodes/node-pool1/owner-stake.skey" \
  --signing-key-file "$STATE_CLUSTER/nodes/node-pool1/reward.skey" \
  --signing-key-file "$STATE_CLUSTER/nodes/node-pool1/cold.skey" \
  --signing-key-file "$STATE_CLUSTER/nodes/node-pool2/owner-stake.skey" \
  --signing-key-file "$STATE_CLUSTER/nodes/node-pool2/reward.skey" \
  --signing-key-file "$STATE_CLUSTER/nodes/node-pool2/cold.skey" \
  --signing-key-file "$STATE_CLUSTER/shelley/faucet.skey" \
  --testnet-magic    "$NETWORK_MAGIC" \
  --tx-body-file     "$STATE_CLUSTER/shelley/transfer-register-delegate-tx.txbody" \
  --out-file         "$STATE_CLUSTER/shelley/transfer-register-delegate-tx.tx"

cardano_cli_log transaction submit \
  --tx-file "$STATE_CLUSTER/shelley/transfer-register-delegate-tx.tx" \
  --testnet-magic "$NETWORK_MAGIC"


echo "cluster started" >> "$STATE_CLUSTER/start-cluster.log"
echo "Cluster started. Run \`stop-cluster\` to stop"
