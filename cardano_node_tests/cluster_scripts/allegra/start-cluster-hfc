#!/bin/bash

set -euo pipefail

SCRIPT_DIR="$(readlink -m "${0%/*}")"
SOCKET_PATH="$(readlink -m "$CARDANO_NODE_SOCKET_PATH")"
STATE_CLUSTER="${SOCKET_PATH%/*}"

NETWORK_MAGIC=42
BYRON_SECURITY_PARAM=100
POOL_PLEDGE=1000000000000
INIT_SUPPLY=45000000000000000

if [ -f "$STATE_CLUSTER/supervisord.pid" ]
then
  echo "Cluster already running. Please run \`stop-cluster\` first!" >&2
  exit 1
fi

rm -rf "$STATE_CLUSTER"
mkdir -p "$STATE_CLUSTER"/{shelley,webserver}
cd "$STATE_CLUSTER/.."

cp "$SCRIPT_DIR/byron-params.json" "$STATE_CLUSTER/byron-params.json"
cp "$SCRIPT_DIR"/cardano-node-* "$STATE_CLUSTER"
cp "$SCRIPT_DIR"/topology-*.json "$STATE_CLUSTER"
cp "$SCRIPT_DIR"/config-*.json "$STATE_CLUSTER"
chmod u+w "$STATE_CLUSTER"/config-*.json

NUM_BFT_NODES=3
FUNDS_PER_GENESIS_ADDRESS="$((INIT_SUPPLY / NUM_BFT_NODES))"
FUNDS_PER_BYRON_ADDRESS="$((FUNDS_PER_GENESIS_ADDRESS * 8 / 10))"

START_TIME_SHELLEY=$(date --utc +"%Y-%m-%dT%H:%M:%SZ" --date="5 seconds")
START_TIME=$(date +%s --date="$START_TIME_SHELLEY")
echo "$START_TIME" > "$STATE_CLUSTER/cluster_start_time"

cardano-cli byron genesis genesis \
  --protocol-magic "$NETWORK_MAGIC" \
  --k "$BYRON_SECURITY_PARAM" \
  --n-poor-addresses 0 \
  --n-delegate-addresses "$NUM_BFT_NODES" \
  --total-balance "$INIT_SUPPLY" \
  --delegate-share 1 \
  --avvm-entry-count 0 \
  --avvm-entry-balance 0 \
  --protocol-parameters-file "$STATE_CLUSTER/byron-params.json" \
  --genesis-output-dir "$STATE_CLUSTER/byron" \
  --start-time "$START_TIME"

mv "$STATE_CLUSTER/byron-params.json" "$STATE_CLUSTER/byron/params.json"

jq -r '.securityParam = 10 | .updateQuorum = 3' \
  < "$SCRIPT_DIR/genesis.spec.json" > "$STATE_CLUSTER/shelley/genesis.spec.json"

cardano-cli genesis create \
  --genesis-dir "$STATE_CLUSTER/shelley" \
  --testnet-magic "$NETWORK_MAGIC" \
  --gen-genesis-keys "$NUM_BFT_NODES" \
  --start-time "$START_TIME_SHELLEY" \
  --gen-utxo-keys 1

for i in {1..3}
do
  mkdir -p "$STATE_CLUSTER/nodes/node-bft$i"
  ln -s "../../shelley/delegate-keys/delegate$i.vrf.skey" "$STATE_CLUSTER/nodes/node-bft$i/vrf.skey"
  ln -s "../../shelley/delegate-keys/delegate$i.vrf.vkey" "$STATE_CLUSTER/nodes/node-bft$i/vrf.vkey"

  cardano-cli node key-gen-KES \
    --verification-key-file "$STATE_CLUSTER/nodes/node-bft$i/kes.vkey" \
    --signing-key-file "$STATE_CLUSTER/nodes/node-bft$i/kes.skey"

  cardano-cli node issue-op-cert \
    --kes-period 0 \
    --cold-signing-key-file "$STATE_CLUSTER/shelley/delegate-keys/delegate$i.skey" \
    --kes-verification-key-file "$STATE_CLUSTER/nodes/node-bft$i/kes.vkey" \
    --operational-certificate-issue-counter-file \
      "$STATE_CLUSTER/shelley/delegate-keys/delegate$i.counter" \
    --out-file "$STATE_CLUSTER/nodes/node-bft$i/op.cert"

  INDEX="$(printf "%03d" $((i - 1)))"

  cardano-cli byron key keygen \
    --secret "$STATE_CLUSTER/byron/payment-keys.$INDEX.key"

  cardano-cli signing-key-address \
    --byron-formats \
    --testnet-magic "$NETWORK_MAGIC" \
    --secret "$STATE_CLUSTER/byron/payment-keys.$INDEX.key" > "$STATE_CLUSTER/byron/address-$INDEX"

  # Write Genesis addresses to files
  cardano-cli signing-key-address \
    --byron-formats  \
    --testnet-magic "$NETWORK_MAGIC" \
    --secret "$STATE_CLUSTER/byron/genesis-keys.$INDEX.key" \
      > "$STATE_CLUSTER/byron/genesis-address-$INDEX"

  ln -s "../../byron/delegate-keys.$INDEX.key" "$STATE_CLUSTER/nodes/node-bft$i/byron-deleg.key"
  ln -s "../../byron/delegation-cert.$INDEX.json" "$STATE_CLUSTER/nodes/node-bft$i/byron-deleg.json"

  # Create Byron address that moves funds out of the genesis UTxO into a regular
  # address.
  cardano-cli byron transaction issue-genesis-utxo-expenditure \
    --genesis-json "$STATE_CLUSTER/byron/genesis.json" \
    --testnet-magic "$NETWORK_MAGIC" \
    --byron-formats \
    --tx "$STATE_CLUSTER/byron/tx$i.tx" \
    --wallet-key "$STATE_CLUSTER/nodes/node-bft$i/byron-deleg.key" \
    --rich-addr-from "$(head -n 1 "$STATE_CLUSTER/byron/genesis-address-$INDEX")" \
    --txout "(\"$(head -n 1 "$STATE_CLUSTER/byron/address-$INDEX")\", $FUNDS_PER_BYRON_ADDRESS)"

  # Convert to Shelley addresses and keys
  cardano-cli key convert-byron-key \
    --byron-signing-key-file "$STATE_CLUSTER/byron/payment-keys.$INDEX.key" \
    --out-file "$STATE_CLUSTER/byron/payment-keys.$INDEX-converted.skey" \
    --byron-payment-key-type

  cardano-cli key verification-key \
    --signing-key-file "$STATE_CLUSTER/byron/payment-keys.$INDEX-converted.skey" \
    --verification-key-file "$STATE_CLUSTER/byron/payment-keys.$INDEX-converted.vkey"

  cardano-cli address build \
    --testnet-magic "$NETWORK_MAGIC" \
    --payment-verification-key-file "$STATE_CLUSTER/byron/payment-keys.$INDEX-converted.vkey" \
    > "$STATE_CLUSTER/byron/address-$INDEX-converted"

  BFT_PORT=$(("30000" + i))
  echo "$BFT_PORT" > "$STATE_CLUSTER/nodes/node-bft$i/port"
done

for i in {1..2}
do
  mkdir -p "$STATE_CLUSTER/nodes/node-pool$i"
  echo "Generating Pool $i Secrets"
  cardano-cli address key-gen \
    --signing-key-file "$STATE_CLUSTER/nodes/node-pool$i/owner-utxo.skey" \
    --verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/owner-utxo.vkey"
  cardano-cli stake-address key-gen \
    --signing-key-file "$STATE_CLUSTER/nodes/node-pool$i/owner-stake.skey" \
    --verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/owner-stake.vkey"
  # Payment addresses
  cardano-cli address build \
    --payment-verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/owner-utxo.vkey" \
    --stake-verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/owner-stake.vkey" \
    --testnet-magic "$NETWORK_MAGIC" \
    --out-file "$STATE_CLUSTER/nodes/node-pool$i/owner.addr"
  # Stake addresses
  cardano-cli stake-address build \
    --stake-verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/owner-stake.vkey" \
    --testnet-magic "$NETWORK_MAGIC" \
    --out-file "$STATE_CLUSTER/nodes/node-pool$i/owner-stake.addr"
  # Stake addresses registration certs
  cardano-cli stake-address registration-certificate \
    --stake-verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/owner-stake.vkey" \
    --out-file "$STATE_CLUSTER/nodes/node-pool$i/stake.reg.cert"

  # Stake reward keys
  cardano-cli stake-address key-gen \
    --signing-key-file "$STATE_CLUSTER/nodes/node-pool$i/reward.skey" \
    --verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/reward.vkey"
  # Stake reward addresses registration certs
  cardano-cli stake-address registration-certificate \
    --stake-verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/reward.vkey" \
    --out-file "$STATE_CLUSTER/nodes/node-pool$i/stake-reward.reg.cert"
  cardano-cli node key-gen \
    --cold-verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/cold.vkey" \
    --cold-signing-key-file "$STATE_CLUSTER/nodes/node-pool$i/cold.skey" \
    --operational-certificate-issue-counter-file "$STATE_CLUSTER/nodes/node-pool$i/cold.counter"
  cardano-cli node key-gen-KES \
    --verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/kes.vkey" \
    --signing-key-file "$STATE_CLUSTER/nodes/node-pool$i/kes.skey"
  cardano-cli node key-gen-VRF \
    --verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/vrf.vkey" \
    --signing-key-file "$STATE_CLUSTER/nodes/node-pool$i/vrf.skey"

  # Stake address delegation certs
  cardano-cli stake-address delegation-certificate \
    --stake-verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/owner-stake.vkey" \
    --cold-verification-key-file  "$STATE_CLUSTER/nodes/node-pool$i/cold.vkey" \
    --out-file "$STATE_CLUSTER/nodes/node-pool$i/owner-stake.deleg.cert"

  cardano-cli node issue-op-cert \
    --kes-period 0 \
    --cold-signing-key-file "$STATE_CLUSTER/nodes/node-pool$i/cold.skey" \
    --kes-verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/kes.vkey" \
    --operational-certificate-issue-counter-file "$STATE_CLUSTER/nodes/node-pool$i/cold.counter" \
    --out-file "$STATE_CLUSTER/nodes/node-pool$i/op.cert"

  echo "Generating Pool $i Metadata"
  jq -n \
    --arg name "TestPool$i" \
    --arg description "Test Pool $i" \
    --arg ticker "TEST$i" \
    --arg homepage "http://localhost:30000/pool$i.html" \
    '{"name": $name, "description": $description, "ticker": $ticker, "homepage": $homepage}' \
    > "$STATE_CLUSTER/webserver/pool$i.json"

  METADATA_URL="http://localhost:30000/pool$i.json"
  METADATA_HASH=$(cardano-cli stake-pool metadata-hash --pool-metadata-file \
    "$STATE_CLUSTER/webserver/pool$i.json")
  POOL_PORT=$(("30000" + "$NUM_BFT_NODES" + i))
  echo "$POOL_PORT" > "$STATE_CLUSTER/nodes/node-pool$i/port"
  echo $POOL_PLEDGE > "$STATE_CLUSTER/nodes/node-pool$i/pledge"

  cardano-cli stake-pool registration-certificate \
    --cold-verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/cold.vkey" \
    --vrf-verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/vrf.vkey" \
    --pool-pledge "$POOL_PLEDGE" \
    --pool-margin 0.35 \
    --pool-cost 600 \
    --pool-reward-account-verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/reward.vkey" \
    --pool-owner-stake-verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/owner-stake.vkey" \
    --metadata-url "$METADATA_URL" \
    --metadata-hash "$METADATA_HASH" \
    --pool-relay-port "$POOL_PORT" \
    --pool-relay-ipv4 "127.0.0.1" \
    --testnet-magic "$NETWORK_MAGIC" \
    --out-file "$STATE_CLUSTER/nodes/node-pool$i/register.cert"
done

mv "$STATE_CLUSTER/shelley/utxo-keys/utxo1.vkey" "$STATE_CLUSTER/shelley/genesis-utxo.vkey"
mv "$STATE_CLUSTER/shelley/utxo-keys/utxo1.skey" "$STATE_CLUSTER/shelley/genesis-utxo.skey"
rmdir "$STATE_CLUSTER/shelley/utxo-keys"

supervisord --config "$SCRIPT_DIR/supervisor.conf" "$@"

while [ ! -S "$CARDANO_NODE_SOCKET_PATH" ]; do
  echo "Waiting 5 seconds for bft node to start"; sleep 5
done

echo "Moving funds out of Byron genesis"
for i in {1..3}
do
  cardano-cli byron transaction submit-tx \
    --testnet-magic "$NETWORK_MAGIC" \
    --tx "$STATE_CLUSTER/byron/tx$i.tx"
done

EPOCH_SEC="$(jq '.epochLength * .slotLength' < "$STATE_CLUSTER/shelley/genesis.json")"
WAIT_SEC="$((EPOCH_SEC + 2))"

echo "Waiting $WAIT_SEC sec for Shelley era to start"
sleep "$WAIT_SEC"


#
# In Shelley era
#


echo "Submitting update proposal to transfer to Allegra, transfering funds to pool owners, registering pools and delegations"

ALLEGRA_HF_PROPOSAL="$STATE_CLUSTER/shelley/update-proposal-allegra.proposal"

cardano-cli governance create-update-proposal \
  --out-file "$ALLEGRA_HF_PROPOSAL" \
  --epoch 1 \
  --genesis-verification-key-file "$STATE_CLUSTER/shelley/genesis-keys/genesis1.vkey" \
  --genesis-verification-key-file "$STATE_CLUSTER/shelley/genesis-keys/genesis2.vkey" \
  --genesis-verification-key-file "$STATE_CLUSTER/shelley/genesis-keys/genesis3.vkey" \
  --protocol-major-version 3 \
  --protocol-minor-version 0

# Tranfer funds, register pools and delegations, submit update proposal, all in one big transaction:

cardano-cli query protocol-parameters \
  --shelley-era \
  --testnet-magic "$NETWORK_MAGIC" \
  --out-file "$STATE_CLUSTER/pparams.json"

TXIN_ADDR="$(<"$STATE_CLUSTER"/byron/address-001-converted)"
UTXO="$(cardano-cli query utxo \
          --shelley-era \
          --testnet-magic "$NETWORK_MAGIC" \
          --address "$TXIN_ADDR" |
          sed -n 3p | { read -r txhash txix amount _; echo "${txhash}#${txix};${amount}"; })"
TXIN="${UTXO%;*}"
TXIN_AMOUNT="${UTXO#*;}"
TTL="$(jq '.slot + 1000' <<< "$(cardano-cli query tip --testnet-magic "$NETWORK_MAGIC")")"

cardano-cli transaction build-raw \
  --shelley-era \
  --ttl    "$TTL" \
  --fee    0 \
  --tx-in  "$TXIN" \
  --tx-out "$TXIN_ADDR+0" \
  --tx-out "$(<"$STATE_CLUSTER/nodes/node-pool1/owner.addr")+$POOL_PLEDGE" \
  --certificate-file "$STATE_CLUSTER/nodes/node-pool1/stake.reg.cert" \
  --certificate-file "$STATE_CLUSTER/nodes/node-pool1/stake-reward.reg.cert" \
  --certificate-file "$STATE_CLUSTER/nodes/node-pool1/register.cert" \
  --certificate-file "$STATE_CLUSTER/nodes/node-pool1/owner-stake.deleg.cert" \
  --tx-out "$(<"$STATE_CLUSTER/nodes/node-pool2/owner.addr")+$POOL_PLEDGE" \
  --certificate-file "$STATE_CLUSTER/nodes/node-pool2/stake.reg.cert" \
  --certificate-file "$STATE_CLUSTER/nodes/node-pool2/stake-reward.reg.cert" \
  --certificate-file "$STATE_CLUSTER/nodes/node-pool2/register.cert" \
  --certificate-file "$STATE_CLUSTER/nodes/node-pool2/owner-stake.deleg.cert" \
  --update-proposal-file "$ALLEGRA_HF_PROPOSAL" \
  --out-file "$STATE_CLUSTER/shelley/transfer-register-delegate-fee-tx.txbody"

FEE="$(cardano-cli transaction calculate-min-fee \
        --testnet-magic "$NETWORK_MAGIC" \
        --protocol-params-file "$STATE_CLUSTER"/pparams.json \
        --tx-in-count 1 \
        --tx-out-count 3 \
        --witness-count 9 \
        --byron-witness-count 0 \
        --tx-body-file "$STATE_CLUSTER/shelley/transfer-register-delegate-fee-tx.txbody" |
        cut -d' ' -f1)"

DEPOSITS="$(jq '.protocolParams.poolDeposit + (2 * .protocolParams.keyDeposit)' \
  < "$STATE_CLUSTER/shelley/genesis.json")"
TXOUT_AMOUNT="$((TXIN_AMOUNT - FEE - (DEPOSITS + POOL_PLEDGE) * 2))"

cardano-cli transaction build-raw \
  --shelley-era \
  --ttl    "$TTL" \
  --fee    "$FEE" \
  --tx-in  "$TXIN" \
  --tx-out "$TXIN_ADDR+$TXOUT_AMOUNT" \
  --tx-out "$(<"$STATE_CLUSTER/nodes/node-pool1/owner.addr")+$POOL_PLEDGE" \
  --certificate-file "$STATE_CLUSTER/nodes/node-pool1/stake.reg.cert" \
  --certificate-file "$STATE_CLUSTER/nodes/node-pool1/stake-reward.reg.cert" \
  --certificate-file "$STATE_CLUSTER/nodes/node-pool1/register.cert" \
  --certificate-file "$STATE_CLUSTER/nodes/node-pool1/owner-stake.deleg.cert" \
  --tx-out "$(<"$STATE_CLUSTER/nodes/node-pool2/owner.addr")+$POOL_PLEDGE" \
  --certificate-file "$STATE_CLUSTER/nodes/node-pool2/stake.reg.cert" \
  --certificate-file "$STATE_CLUSTER/nodes/node-pool2/stake-reward.reg.cert" \
  --certificate-file "$STATE_CLUSTER/nodes/node-pool2/register.cert" \
  --certificate-file "$STATE_CLUSTER/nodes/node-pool2/owner-stake.deleg.cert" \
  --update-proposal-file "$ALLEGRA_HF_PROPOSAL" \
  --out-file         "$STATE_CLUSTER/shelley/transfer-register-delegate-tx.txbody"

cardano-cli transaction sign \
  --signing-key-file "$STATE_CLUSTER/nodes/node-pool1/owner-stake.skey" \
  --signing-key-file "$STATE_CLUSTER/nodes/node-pool1/reward.skey" \
  --signing-key-file "$STATE_CLUSTER/nodes/node-pool1/cold.skey" \
  --signing-key-file "$STATE_CLUSTER/nodes/node-pool2/owner-stake.skey" \
  --signing-key-file "$STATE_CLUSTER/nodes/node-pool2/reward.skey" \
  --signing-key-file "$STATE_CLUSTER/nodes/node-pool2/cold.skey" \
  --signing-key-file "$STATE_CLUSTER/byron/payment-keys.001-converted.skey" \
  --signing-key-file "$STATE_CLUSTER/shelley/genesis-keys/genesis1.skey" \
  --signing-key-file "$STATE_CLUSTER/shelley/genesis-keys/genesis2.skey" \
  --signing-key-file "$STATE_CLUSTER/shelley/genesis-keys/genesis3.skey" \
  --signing-key-file "$STATE_CLUSTER/shelley/delegate-keys/delegate1.skey" \
  --signing-key-file "$STATE_CLUSTER/shelley/delegate-keys/delegate2.skey" \
  --signing-key-file "$STATE_CLUSTER/shelley/delegate-keys/delegate3.skey" \
  --testnet-magic    "$NETWORK_MAGIC" \
  --tx-body-file     "$STATE_CLUSTER/shelley/transfer-register-delegate-tx.txbody" \
  --out-file         "$STATE_CLUSTER/shelley/transfer-register-delegate-tx.tx"

cardano-cli transaction submit \
  --tx-file "$STATE_CLUSTER/shelley/transfer-register-delegate-tx.tx" \
  --testnet-magic "$NETWORK_MAGIC"

echo "Waiting $WAIT_SEC sec for Allegra era to start"
sleep "$WAIT_SEC"


echo "Cluster started. Run \`stop-cluster\` to stop"
