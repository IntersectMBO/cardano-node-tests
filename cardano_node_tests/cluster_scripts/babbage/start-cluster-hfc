#!/usr/bin/env bash

# controlling environment variables:
# DBSYNC_REPO - will start and configure db-sync if the value is path to db-sync repository
# ENABLE_P2P - if set, local cluster will use P2P
# SKIP_PLUTUSV2 - if set, PlutusV2 cost model will not be present in alonzo genesis
# UPDATE_COST_MODEL - if set, PlutusV2 cost model will be made available through update proposal

set -euo pipefail
sets="$-"

SCRIPT_DIR="$(readlink -m "${0%/*}")"
SOCKET_PATH="$(readlink -m "$CARDANO_NODE_SOCKET_PATH")"
STATE_CLUSTER="${SOCKET_PATH%/*}"
STATE_CLUSTER_NAME="${STATE_CLUSTER##*/}"

NUM_BFT_NODES=1
NUM_POOLS=3
NETWORK_MAGIC=42
PROPOSAL_DELAY=5
BYRON_SECURITY_PARAM=10
POOL_PLEDGE=1000000000000
INIT_SUPPLY=45000000000000000

if [ -f "$STATE_CLUSTER/supervisord.pid" ]; then
  echo "Cluster already running. Please run \`$SCRIPT_DIR/stop-cluster-hfc\` first!" >&2
  exit 1
fi

cardano_cli_log() {
  echo cardano-cli "$@" >> "$STATE_CLUSTER/start_cluster_cmds.log"

  for _ in {1..3}; do
    set +e
    out="$(cardano-cli "$@" 2>&1)"
    retval="$?"
    set -"$sets"

    case "$out" in
      *"resource vanished"*)
        printf "Retrying \`cardano-cli %s\`. Failure:\n%s\n" "$*" "$out" >&2
        sleep 1
        ;;
      *)
        if [ -n "$out" ]; then echo "$out"; fi
        break
        ;;
    esac
  done

  return "$retval"
}

get_epoch() {
  cardano_cli_log query tip --testnet-magic "$NETWORK_MAGIC" | jq -r '.epoch'
}

get_slot() {
  future_offset="${1:-0}"
  cardano_cli_log query tip --testnet-magic "$NETWORK_MAGIC" | jq -r ".slot + $future_offset"
}

get_era() {
  cardano_cli_log query tip --testnet-magic "$NETWORK_MAGIC" | jq -r ".era"
}

wait_for_era() {
  for _ in {1..10}; do
    era="$(get_era)"
    if [ "$era" = "$1" ]; then
      return
    fi
    sleep 2
  done

  echo "Unexpected era '$era' instead of '$1'" >&2
  exit 1
}

wait_for_epoch() {
  for _ in {1..10}; do
    epoch="$(get_epoch)"
    if [ "$epoch" -ge "$1" ]; then
      return
    fi
    sleep 2
  done

  echo "Unexpected epoch '$epoch' instead of '$1'" >&2
  exit 1
}

if [ -e "$SCRIPT_DIR/shell_env" ]; then
  # shellcheck disable=SC1090,SC1091
  source "$SCRIPT_DIR/shell_env"
fi

rm -rf "$STATE_CLUSTER"
mkdir -p "$STATE_CLUSTER"/{shelley,webserver,db-sync}
cd "$STATE_CLUSTER/.."

cp "$SCRIPT_DIR"/cardano-node-* "$STATE_CLUSTER"
cp "$SCRIPT_DIR"/cardano-submit-api "$STATE_CLUSTER"
cp "$SCRIPT_DIR/byron-params.json" "$STATE_CLUSTER"
cp "$SCRIPT_DIR/dbsync-config.yaml" "$STATE_CLUSTER"
cp "$SCRIPT_DIR/submit-api-config.yaml" "$STATE_CLUSTER"
cp "$SCRIPT_DIR/supervisor.conf" "$STATE_CLUSTER"
cp "$SCRIPT_DIR"/genesis*.spec.json "$STATE_CLUSTER/shelley/"

if [ -n "${ENABLE_P2P:-""}" ]; then
  # use P2P topology files
  for tconf in "$SCRIPT_DIR"/p2p-topology-*.json; do
    tfname="${tconf##*/p2p-}"
    cp "$tconf" "${STATE_CLUSTER}/${tfname}"
  done
else
  cp "$SCRIPT_DIR"/topology-*.json "$STATE_CLUSTER"
fi

# enable db-sync service
if [ -n "${DBSYNC_REPO:-""}" ]; then
  [ -e "$DBSYNC_REPO/db-sync-node/bin/cardano-db-sync" ] || \
    { echo "The \`$DBSYNC_REPO/db-sync-node/bin/cardano-db-sync\` not found, line $LINENO" >&2; exit 1; }  # assert

  # create clean database
  "$SCRIPT_DIR/postgres-setup.sh"

  cat >> "$STATE_CLUSTER/supervisor.conf" <<EoF

[program:dbsync]
command=$SCRIPT_DIR/run_dbsync.sh
stderr_logfile=./$STATE_CLUSTER_NAME/dbsync.stderr
stdout_logfile=./$STATE_CLUSTER_NAME/dbsync.stdout
autostart=false
autorestart=false
startsecs=3
EoF
fi

# enable cardano-submit-api service
if type cardano-submit-api >/dev/null; then
  cat >> "$STATE_CLUSTER/supervisor.conf" <<EoF

[program:submit_api]
command=$SCRIPT_DIR/cardano-submit-api
stderr_logfile=./$STATE_CLUSTER_NAME/submit_api.stderr
stdout_logfile=./$STATE_CLUSTER_NAME/submit_api.stdout
autostart=false
autorestart=false
startsecs=3
EoF
fi

FUNDS_PER_GENESIS_ADDRESS="$((INIT_SUPPLY / NUM_BFT_NODES))"
FUNDS_PER_BYRON_ADDRESS="$((FUNDS_PER_GENESIS_ADDRESS * 8 / 10))"

START_TIME_SHELLEY=$(date --utc +"%Y-%m-%dT%H:%M:%SZ" --date="5 seconds")
START_TIME=$(date +%s --date="$START_TIME_SHELLEY")
echo "$START_TIME" > "$STATE_CLUSTER/cluster_start_time"

cardano_cli_log byron genesis genesis \
  --protocol-magic "$NETWORK_MAGIC" \
  --k "$BYRON_SECURITY_PARAM" \
  --n-poor-addresses 0 \
  --n-delegate-addresses "$NUM_BFT_NODES" \
  --total-balance "$INIT_SUPPLY" \
  --delegate-share 1 \
  --avvm-entry-count 0 \
  --avvm-entry-balance 0 \
  --protocol-parameters-file "$STATE_CLUSTER/byron-params.json" \
  --genesis-output-dir "$STATE_CLUSTER/byron" \
  --start-time "$START_TIME"

mv "$STATE_CLUSTER/byron-params.json" "$STATE_CLUSTER/byron/params.json"

cardano_cli_log genesis create \
  --genesis-dir "$STATE_CLUSTER/shelley" \
  --testnet-magic "$NETWORK_MAGIC" \
  --gen-genesis-keys "$NUM_BFT_NODES" \
  --start-time "$START_TIME_SHELLEY" \
  --gen-utxo-keys 1

jq -r '
  .initialFunds = {}' \
  < "$STATE_CLUSTER/shelley/genesis.json" > "$STATE_CLUSTER/shelley/genesis.json_jq"
cat "$STATE_CLUSTER/shelley/genesis.json_jq" > "$STATE_CLUSTER/shelley/genesis.json"
rm -f "$STATE_CLUSTER/shelley/genesis.json_jq"

# delete PlutusV2 cost model when indicated
if [ -n "${SKIP_PLUTUSV2:-""}" ] || [ -n "${UPDATE_COST_MODEL:-""}" ]; then
  jq -r '
    del(.costModels.PlutusV2)' \
    < "$STATE_CLUSTER/shelley/genesis.alonzo.json" > "$STATE_CLUSTER/shelley/genesis.alonzo.json_jq"
  cat "$STATE_CLUSTER/shelley/genesis.alonzo.json_jq" > "$STATE_CLUSTER/shelley/genesis.alonzo.json"
  rm -f "$STATE_CLUSTER/shelley/genesis.alonzo.json_jq"
fi

BYRON_GENESIS_HASH="$(cardano_cli_log byron genesis print-genesis-hash --genesis-json \
  "$STATE_CLUSTER/byron/genesis.json")"
SHELLEY_GENESIS_HASH="$(cardano_cli_log genesis hash --genesis \
  "$STATE_CLUSTER/shelley/genesis.json")"
ALONZO_GENESIS_HASH="$(cardano_cli_log genesis hash --genesis \
  "$STATE_CLUSTER/shelley/genesis.alonzo.json")"
for conf in "$SCRIPT_DIR"/config-*.json; do
  fname="${conf##*/}"
  jq \
    --arg byron_hash "$BYRON_GENESIS_HASH" \
    --arg shelley_hash "$SHELLEY_GENESIS_HASH" \
    --arg alonzo_hash "$ALONZO_GENESIS_HASH" \
    '.ByronGenesisHash = $byron_hash | .ShelleyGenesisHash = $shelley_hash | .AlonzoGenesisHash = $alonzo_hash' \
    "$conf" > "$STATE_CLUSTER/$fname"

  # enable P2P
  if [ -n "${ENABLE_P2P:-""}" ]; then
    jq \
      '.EnableP2P = true
      | .MaxConcurrencyBulkSync = 2
      | .MaxConcurrencyDeadline = 4
      | .TargetNumberOfRootPeers = 100
      | .TargetNumberOfKnownPeers = 100
      | .TargetNumberOfEstablishedPeers = 50
      | .TargetNumberOfActivePeers = 20
      | .TestEnableDevelopmentNetworkProtocols = true
      | .TraceBlockFetchClient = true
      | .TraceChainSyncClient = true' \
      "$STATE_CLUSTER/$fname" > "$STATE_CLUSTER/${fname}_jq"
    cat "$STATE_CLUSTER/${fname}_jq" > "$STATE_CLUSTER/$fname"
    rm -f "$STATE_CLUSTER/${fname}_jq"
  fi
done

for i in $(seq 1 $NUM_BFT_NODES); do
  mkdir -p "$STATE_CLUSTER/nodes/node-bft$i"
  ln -s "../../shelley/delegate-keys/delegate$i.vrf.skey" "$STATE_CLUSTER/nodes/node-bft$i/vrf.skey"
  ln -s "../../shelley/delegate-keys/delegate$i.vrf.vkey" "$STATE_CLUSTER/nodes/node-bft$i/vrf.vkey"

  cardano_cli_log node key-gen-KES \
    --verification-key-file "$STATE_CLUSTER/nodes/node-bft$i/kes.vkey" \
    --signing-key-file "$STATE_CLUSTER/nodes/node-bft$i/kes.skey"

  cardano_cli_log node issue-op-cert \
    --kes-period 0 \
    --cold-signing-key-file "$STATE_CLUSTER/shelley/delegate-keys/delegate$i.skey" \
    --kes-verification-key-file "$STATE_CLUSTER/nodes/node-bft$i/kes.vkey" \
    --operational-certificate-issue-counter-file \
      "$STATE_CLUSTER/shelley/delegate-keys/delegate$i.counter" \
    --out-file "$STATE_CLUSTER/nodes/node-bft$i/op.cert"

  INDEX="$(printf "%03d" $((i - 1)))"

  cardano_cli_log byron key keygen \
    --secret "$STATE_CLUSTER/byron/payment-keys.$INDEX.key"

  cardano_cli_log byron key signing-key-address \
    --byron-formats \
    --testnet-magic "$NETWORK_MAGIC" \
    --secret "$STATE_CLUSTER/byron/payment-keys.$INDEX.key" > "$STATE_CLUSTER/byron/address-$INDEX"

  # write Genesis addresses to files
  cardano_cli_log byron key signing-key-address \
    --byron-formats  \
    --testnet-magic "$NETWORK_MAGIC" \
    --secret "$STATE_CLUSTER/byron/genesis-keys.$INDEX.key" \
      > "$STATE_CLUSTER/byron/genesis-address-$INDEX"

  ln -s "../../byron/delegate-keys.$INDEX.key" "$STATE_CLUSTER/nodes/node-bft$i/byron-deleg.key"
  ln -s "../../byron/delegation-cert.$INDEX.json" "$STATE_CLUSTER/nodes/node-bft$i/byron-deleg.json"

  # create Byron address that moves funds out of the genesis UTxO into a regular address
  cardano_cli_log byron transaction issue-genesis-utxo-expenditure \
    --genesis-json "$STATE_CLUSTER/byron/genesis.json" \
    --testnet-magic "$NETWORK_MAGIC" \
    --byron-formats \
    --tx "$STATE_CLUSTER/byron/tx$i.tx" \
    --wallet-key "$STATE_CLUSTER/nodes/node-bft$i/byron-deleg.key" \
    --rich-addr-from "$(head -n 1 "$STATE_CLUSTER/byron/genesis-address-$INDEX")" \
    --txout "(\"$(head -n 1 "$STATE_CLUSTER/byron/address-$INDEX")\", $FUNDS_PER_BYRON_ADDRESS)"

  # convert to Shelley addresses and keys
  cardano_cli_log key convert-byron-key \
    --byron-signing-key-file "$STATE_CLUSTER/byron/payment-keys.$INDEX.key" \
    --out-file "$STATE_CLUSTER/byron/payment-keys.$INDEX-converted.skey" \
    --byron-payment-key-type

  cardano_cli_log key verification-key \
    --signing-key-file "$STATE_CLUSTER/byron/payment-keys.$INDEX-converted.skey" \
    --verification-key-file "$STATE_CLUSTER/byron/payment-keys.$INDEX-converted.vkey"

  cardano_cli_log address build \
    --testnet-magic "$NETWORK_MAGIC" \
    --payment-verification-key-file "$STATE_CLUSTER/byron/payment-keys.$INDEX-converted.vkey" \
    > "$STATE_CLUSTER/byron/address-$INDEX-converted"

  BFT_PORT=$(("30000" + i))
  echo "$BFT_PORT" > "$STATE_CLUSTER/nodes/node-bft$i/port"
done

for i in $(seq 1 $NUM_POOLS); do
  mkdir -p "$STATE_CLUSTER/nodes/node-pool$i"
  echo "Generating Pool $i Secrets"
  cardano_cli_log address key-gen \
    --signing-key-file "$STATE_CLUSTER/nodes/node-pool$i/owner-utxo.skey" \
    --verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/owner-utxo.vkey"
  cardano_cli_log stake-address key-gen \
    --signing-key-file "$STATE_CLUSTER/nodes/node-pool$i/owner-stake.skey" \
    --verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/owner-stake.vkey"
  # payment addresses
  cardano_cli_log address build \
    --payment-verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/owner-utxo.vkey" \
    --stake-verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/owner-stake.vkey" \
    --testnet-magic "$NETWORK_MAGIC" \
    --out-file "$STATE_CLUSTER/nodes/node-pool$i/owner.addr"
  # stake addresses
  cardano_cli_log stake-address build \
    --stake-verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/owner-stake.vkey" \
    --testnet-magic "$NETWORK_MAGIC" \
    --out-file "$STATE_CLUSTER/nodes/node-pool$i/owner-stake.addr"
  # stake addresses registration certs
  cardano_cli_log stake-address registration-certificate \
    --stake-verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/owner-stake.vkey" \
    --out-file "$STATE_CLUSTER/nodes/node-pool$i/stake.reg.cert"

  # stake reward keys
  cardano_cli_log stake-address key-gen \
    --signing-key-file "$STATE_CLUSTER/nodes/node-pool$i/reward.skey" \
    --verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/reward.vkey"
  # stake reward addresses registration certs
  cardano_cli_log stake-address registration-certificate \
    --stake-verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/reward.vkey" \
    --out-file "$STATE_CLUSTER/nodes/node-pool$i/stake-reward.reg.cert"
  cardano_cli_log node key-gen \
    --cold-verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/cold.vkey" \
    --cold-signing-key-file "$STATE_CLUSTER/nodes/node-pool$i/cold.skey" \
    --operational-certificate-issue-counter-file "$STATE_CLUSTER/nodes/node-pool$i/cold.counter"
  cardano_cli_log node key-gen-KES \
    --verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/kes.vkey" \
    --signing-key-file "$STATE_CLUSTER/nodes/node-pool$i/kes.skey"
  cardano_cli_log node key-gen-VRF \
    --verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/vrf.vkey" \
    --signing-key-file "$STATE_CLUSTER/nodes/node-pool$i/vrf.skey"

  # stake address delegation certs
  cardano_cli_log stake-address delegation-certificate \
    --stake-verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/owner-stake.vkey" \
    --cold-verification-key-file  "$STATE_CLUSTER/nodes/node-pool$i/cold.vkey" \
    --out-file "$STATE_CLUSTER/nodes/node-pool$i/owner-stake.deleg.cert"

  cardano_cli_log node issue-op-cert \
    --kes-period 0 \
    --cold-signing-key-file "$STATE_CLUSTER/nodes/node-pool$i/cold.skey" \
    --kes-verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/kes.vkey" \
    --operational-certificate-issue-counter-file "$STATE_CLUSTER/nodes/node-pool$i/cold.counter" \
    --out-file "$STATE_CLUSTER/nodes/node-pool$i/op.cert"

  POOL_NAME="TestPool$i"
  POOL_DESC="Test Pool $i"
  POOL_TICKER="TEST$i"

  cat > "$STATE_CLUSTER/webserver/pool$i.html" <<EoF
<!DOCTYPE html>
<html>
<head>
<title>$POOL_NAME</title>
</head>
<body>
name: <strong>$POOL_NAME</strong><br>
description: <strong>$POOL_DESC</strong><br>
ticker: <strong>$POOL_TICKER</strong><br>
</body>
</html>
EoF

  echo "Generating Pool $i Metadata"
  jq -n \
    --arg name "$POOL_NAME" \
    --arg description "$POOL_DESC" \
    --arg ticker "$POOL_TICKER" \
    --arg homepage "http://localhost:30000/pool$i.html" \
    '{"name": $name, "description": $description, "ticker": $ticker, "homepage": $homepage}' \
    > "$STATE_CLUSTER/webserver/pool$i.json"

  METADATA_URL="http://localhost:30000/pool$i.json"
  METADATA_HASH=$(cardano_cli_log stake-pool metadata-hash --pool-metadata-file \
    "$STATE_CLUSTER/webserver/pool$i.json")
  POOL_PORT=$(("30000" + "$NUM_BFT_NODES" + i))
  echo "$POOL_PORT" > "$STATE_CLUSTER/nodes/node-pool$i/port"
  echo $POOL_PLEDGE > "$STATE_CLUSTER/nodes/node-pool$i/pledge"

  cardano_cli_log stake-pool registration-certificate \
    --cold-verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/cold.vkey" \
    --vrf-verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/vrf.vkey" \
    --pool-pledge "$POOL_PLEDGE" \
    --pool-margin 0.35 \
    --pool-cost 600 \
    --pool-reward-account-verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/reward.vkey" \
    --pool-owner-stake-verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/owner-stake.vkey" \
    --metadata-url "$METADATA_URL" \
    --metadata-hash "$METADATA_HASH" \
    --pool-relay-port "$POOL_PORT" \
    --pool-relay-ipv4 "127.0.0.1" \
    --testnet-magic "$NETWORK_MAGIC" \
    --out-file "$STATE_CLUSTER/nodes/node-pool$i/register.cert"
done

mv "$STATE_CLUSTER/shelley/utxo-keys/utxo1.vkey" "$STATE_CLUSTER/shelley/genesis-utxo.vkey"
mv "$STATE_CLUSTER/shelley/utxo-keys/utxo1.skey" "$STATE_CLUSTER/shelley/genesis-utxo.skey"
rmdir "$STATE_CLUSTER/shelley/utxo-keys"

# create scripts for cluster starting / stopping
printf "#!/bin/sh\n\nsupervisorctl start all" > "$STATE_CLUSTER/supervisorctl_start"
printf "#!/bin/sh\n\nsupervisorctl restart nodes:" > "$STATE_CLUSTER/supervisorctl_restart_nodes"
printf "#!/bin/sh\n\nsupervisord --config ./%s/supervisor.conf" "$STATE_CLUSTER_NAME" \
  > "$STATE_CLUSTER/supervisord_start"
cat > "$STATE_CLUSTER/supervisord_stop" <<EoF
#!/usr/bin/env bash

set -uo pipefail

SCRIPT_DIR="\$(readlink -m "\${0%/*}")"

supervisorctl stop all

if [ -f "\$SCRIPT_DIR/supervisord.pid" ]; then
  kill "\$(<"\$SCRIPT_DIR/supervisord.pid")"
  rm -f "\$SCRIPT_DIR/supervisord.pid"
fi
EoF
chmod u+x "$STATE_CLUSTER"/{supervisorctl_*,supervisord_*}

supervisord --config "$STATE_CLUSTER/supervisor.conf"

for _ in {1..5}; do
  if [ -S "$CARDANO_NODE_SOCKET_PATH" ]; then
    break
  fi
  echo "Waiting 5 seconds for bft node to start"
  sleep 5
done
[ -S "$CARDANO_NODE_SOCKET_PATH" ] || { echo "Failed to start the bft node, line $LINENO" >&2; exit 1; }  # assert

echo "Moving funds out of Byron genesis"
for i in $(seq 1 $NUM_BFT_NODES); do
  cardano_cli_log byron transaction submit-tx \
    --testnet-magic "$NETWORK_MAGIC" \
    --tx "$STATE_CLUSTER/byron/tx$i.tx"
done

# length of Byron era is hardcoded to 200 sec (+2 sec buffer)
echo "Waiting 200 sec for Shelley era to start"
sleep 200


#
# In Shelley era
#


wait_for_era "Shelley"

# start db-sync
if [ -n "${DBSYNC_REPO:-""}" ]; then
  echo "Starting db-sync"
  supervisorctl start dbsync
fi

sleep "$PROPOSAL_DELAY"
echo "Submitting update proposal to transfer to Allegra, transfering funds to pool owners, registering pools and delegations"

ALLEGRA_HF_PROPOSAL="$STATE_CLUSTER/shelley/update-proposal-allegra.proposal"

GENESIS_VERIFICATION=()
for i in $(seq 1 $NUM_BFT_NODES); do
  GENESIS_VERIFICATION+=( \
    "--genesis-verification-key-file" "$STATE_CLUSTER/shelley/genesis-keys/genesis$i.vkey" \
  )
done

cardano_cli_log governance create-update-proposal \
  --out-file "$ALLEGRA_HF_PROPOSAL" \
  --epoch "$(get_epoch)" \
  "${GENESIS_VERIFICATION[@]}" \
  --protocol-major-version 3 \
  --protocol-minor-version 0

# Tranfer funds, register pools and delegations, submit update proposal, all in one big transaction:

cardano_cli_log query protocol-parameters \
  --testnet-magic "$NETWORK_MAGIC" \
  --out-file "$STATE_CLUSTER/pparams.json"

TXIN_ADDR="$(<"$STATE_CLUSTER"/byron/address-000-converted)"
DEPOSITS="$(jq '.protocolParams.poolDeposit + (2 * .protocolParams.keyDeposit)' \
  < "$STATE_CLUSTER/shelley/genesis.json")"
NEEDED_AMOUNT="$(( (POOL_PLEDGE + DEPOSITS) * NUM_POOLS ))"
FEE_BUFFER=100000000
STOP_TXIN_AMOUNT="$((NEEDED_AMOUNT + FEE_BUFFER))"

TXINS=()
TXIN_COUNT=0
TXIN_AMOUNT=0
while read -r txhash txix amount _; do
  TXIN_AMOUNT="$((TXIN_AMOUNT + amount))"
  TXIN_COUNT="$((TXIN_COUNT + 1))"
  TXINS+=("--tx-in" "${txhash}#${txix}")
  if [ "$TXIN_AMOUNT" -ge "$STOP_TXIN_AMOUNT" ]; then
    break
  fi
done <<< "$(cardano_cli_log query utxo --testnet-magic \
            "$NETWORK_MAGIC" \
            --address "$TXIN_ADDR" |
            grep -E "lovelace$|[0-9]$")"

TTL="$(get_slot 1000)"

POOL_ARGS=()
for i in $(seq 1 $NUM_POOLS); do
  POOL_ARGS+=( \
    "--tx-out" "$(<"$STATE_CLUSTER/nodes/node-pool$i/owner.addr")+$POOL_PLEDGE" \
    "--certificate-file" "$STATE_CLUSTER/nodes/node-pool$i/stake.reg.cert" \
    "--certificate-file" "$STATE_CLUSTER/nodes/node-pool$i/stake-reward.reg.cert" \
    "--certificate-file" "$STATE_CLUSTER/nodes/node-pool$i/register.cert" \
    "--certificate-file" "$STATE_CLUSTER/nodes/node-pool$i/owner-stake.deleg.cert" \
  )
done

cardano_cli_log transaction build-raw \
  --shelley-era \
  --ttl    "$TTL" \
  --fee    0 \
  "${TXINS[@]}" \
  --tx-out "$TXIN_ADDR+0" \
  "${POOL_ARGS[@]}" \
  --update-proposal-file "$ALLEGRA_HF_PROPOSAL" \
  --out-file "$STATE_CLUSTER/shelley/transfer-register-delegate-fee-tx.txbody"

FEE="$(cardano_cli_log transaction calculate-min-fee \
        --testnet-magic "$NETWORK_MAGIC" \
        --protocol-params-file "$STATE_CLUSTER"/pparams.json \
        --tx-in-count 1 \
        --tx-out-count 3 \
        --witness-count 9 \
        --byron-witness-count 0 \
        --tx-body-file "$STATE_CLUSTER/shelley/transfer-register-delegate-fee-tx.txbody" |
        cut -d' ' -f1)"

TXOUT_AMOUNT="$((TXIN_AMOUNT - FEE - NEEDED_AMOUNT))"

cardano_cli_log transaction build-raw \
  --shelley-era \
  --ttl    "$TTL" \
  --fee    "$FEE" \
  "${TXINS[@]}" \
  --tx-out "$TXIN_ADDR+$TXOUT_AMOUNT" \
  "${POOL_ARGS[@]}" \
  --update-proposal-file "$ALLEGRA_HF_PROPOSAL" \
  --out-file         "$STATE_CLUSTER/shelley/transfer-register-delegate-tx.txbody"

POOL_SIGNING=()
for i in $(seq 1 $NUM_POOLS); do
  POOL_SIGNING+=( \
    "--signing-key-file" "$STATE_CLUSTER/nodes/node-pool$i/owner-stake.skey" \
    "--signing-key-file" "$STATE_CLUSTER/nodes/node-pool$i/reward.skey" \
    "--signing-key-file" "$STATE_CLUSTER/nodes/node-pool$i/cold.skey" \
  )
done
BFT_SIGNING=()
for i in $(seq 1 $NUM_BFT_NODES); do
  BFT_SIGNING+=( \
    "--signing-key-file" "$STATE_CLUSTER/shelley/genesis-keys/genesis$i.skey" \
    "--signing-key-file" "$STATE_CLUSTER/shelley/delegate-keys/delegate$i.skey" \
  )
done

cardano_cli_log transaction sign \
  "${POOL_SIGNING[@]}" \
  --signing-key-file "$STATE_CLUSTER/byron/payment-keys.000-converted.skey" \
  "${BFT_SIGNING[@]}" \
  --testnet-magic    "$NETWORK_MAGIC" \
  --tx-body-file     "$STATE_CLUSTER/shelley/transfer-register-delegate-tx.txbody" \
  --out-file         "$STATE_CLUSTER/shelley/transfer-register-delegate-tx.tx"

cardano_cli_log transaction submit \
  --tx-file "$STATE_CLUSTER/shelley/transfer-register-delegate-tx.tx" \
  --testnet-magic "$NETWORK_MAGIC"

EPOCH_SEC="$(jq '.epochLength * .slotLength' < "$STATE_CLUSTER/shelley/genesis.json")"
NEXT_EPOCH_SLEEP="$((EPOCH_SEC - PROPOSAL_DELAY))"

echo "Waiting $NEXT_EPOCH_SLEEP sec for Allegra era to start"
sleep "$NEXT_EPOCH_SLEEP"


#
# In Allegra era
#


wait_for_era "Allegra"

sleep "$PROPOSAL_DELAY"
echo "Submitting update proposal to transfer to Mary, set d = 0"

MARY_HF_PROPOSAL="$STATE_CLUSTER/shelley/update-proposal-mary.proposal"

cardano_cli_log governance create-update-proposal \
  --out-file "$MARY_HF_PROPOSAL" \
  --epoch "$(get_epoch)" \
  "${GENESIS_VERIFICATION[@]}" \
  --decentralization-parameter 0 \
  --protocol-major-version 4 \
  --protocol-minor-version 0

cardano_cli_log query protocol-parameters \
  --testnet-magic "$NETWORK_MAGIC" \
  --out-file "$STATE_CLUSTER/pparams.json"

FEE_BUFFER=100000000
STOP_TXIN_AMOUNT=$FEE_BUFFER

TXINS=()
TXIN_COUNT=0
TXIN_AMOUNT=0
while read -r txhash txix amount _; do
  TXIN_AMOUNT="$((TXIN_AMOUNT + amount))"
  TXIN_COUNT="$((TXIN_COUNT + 1))"
  TXINS+=("--tx-in" "${txhash}#${txix}")
  if [ "$TXIN_AMOUNT" -ge "$STOP_TXIN_AMOUNT" ]; then
    break
  fi
done <<< "$(cardano_cli_log query utxo --testnet-magic \
            "$NETWORK_MAGIC" \
            --address "$TXIN_ADDR" |
            grep -E "lovelace$|[0-9]$")"

TTL="$(get_slot 1000)"

cardano_cli_log transaction build-raw \
  --allegra-era \
  --ttl    "$TTL" \
  --fee    0 \
  "${TXINS[@]}" \
  --tx-out "$TXIN_ADDR+0" \
  --update-proposal-file "$MARY_HF_PROPOSAL" \
  --out-file "$STATE_CLUSTER/shelley/update-proposal-mary-fee-tx.txbody"

FEE="$(cardano_cli_log transaction calculate-min-fee \
        --testnet-magic "$NETWORK_MAGIC" \
        --protocol-params-file "$STATE_CLUSTER"/pparams.json \
        --tx-in-count 1 \
        --tx-out-count 1 \
        --witness-count 5 \
        --byron-witness-count 0 \
        --tx-body-file "$STATE_CLUSTER/shelley/update-proposal-mary-fee-tx.txbody" |
        cut -d' ' -f1)"

TXOUT_AMOUNT="$((TXIN_AMOUNT - FEE))"

cardano_cli_log transaction build-raw \
  --allegra-era \
  --ttl    "$TTL" \
  --fee    "$FEE" \
  "${TXINS[@]}" \
  --tx-out "$TXIN_ADDR+$TXOUT_AMOUNT" \
  --update-proposal-file "$MARY_HF_PROPOSAL" \
  --out-file         "$STATE_CLUSTER/shelley/update-proposal-mary-tx.txbody"

DELEGATE_SIGNING=()
for i in $(seq 1 $NUM_BFT_NODES); do
  DELEGATE_SIGNING+=( \
    "--signing-key-file" "$STATE_CLUSTER/shelley/delegate-keys/delegate$i.skey" \
  )
done
cardano_cli_log transaction sign \
  --signing-key-file "$STATE_CLUSTER/byron/payment-keys.000-converted.skey" \
  "${DELEGATE_SIGNING[@]}" \
  --testnet-magic    "$NETWORK_MAGIC" \
  --tx-body-file     "$STATE_CLUSTER/shelley/update-proposal-mary-tx.txbody" \
  --out-file         "$STATE_CLUSTER/shelley/update-proposal-mary-tx.tx"

cardano_cli_log transaction submit \
  --tx-file "$STATE_CLUSTER/shelley/update-proposal-mary-tx.tx" \
  --testnet-magic "$NETWORK_MAGIC"

echo "Waiting $NEXT_EPOCH_SLEEP sec for Mary era to start"
sleep "$NEXT_EPOCH_SLEEP"


#
# In Mary era
#


wait_for_era "Mary"

sleep "$PROPOSAL_DELAY"
echo "Submitting update proposal to transfer to Alonzo"

ALONZO_UPDATE_PROPOSAL="$STATE_CLUSTER/shelley/update-proposal-alonzo.proposal"

cardano_cli_log governance create-update-proposal \
  --out-file "$ALONZO_UPDATE_PROPOSAL" \
  --epoch "$(get_epoch)" \
  "${GENESIS_VERIFICATION[@]}" \
  --protocol-major-version 5 \
  --protocol-minor-version 0

cardano_cli_log query protocol-parameters \
  --testnet-magic "$NETWORK_MAGIC" \
  --out-file "$STATE_CLUSTER/pparams.json"

FEE_BUFFER=100000000
STOP_TXIN_AMOUNT=$FEE_BUFFER

TXINS=()
TXIN_COUNT=0
TXIN_AMOUNT=0
while read -r txhash txix amount _; do
  TXIN_AMOUNT="$((TXIN_AMOUNT + amount))"
  TXIN_COUNT="$((TXIN_COUNT + 1))"
  TXINS+=("--tx-in" "${txhash}#${txix}")
  if [ "$TXIN_AMOUNT" -ge "$STOP_TXIN_AMOUNT" ]; then
    break
  fi
done <<< "$(cardano_cli_log query utxo --testnet-magic \
            "$NETWORK_MAGIC" \
            --address "$TXIN_ADDR" |
            grep -E "lovelace$|[0-9]$")"

TTL="$(get_slot 1000)"

cardano_cli_log transaction build-raw \
  --mary-era \
  --ttl    "$TTL" \
  --fee    0 \
  "${TXINS[@]}" \
  --tx-out "$TXIN_ADDR+0" \
  --update-proposal-file "$ALONZO_UPDATE_PROPOSAL" \
  --out-file "$STATE_CLUSTER/shelley/update-proposal-alonzo-fee-tx.txbody"

FEE="$(cardano_cli_log transaction calculate-min-fee \
        --testnet-magic "$NETWORK_MAGIC" \
        --protocol-params-file "$STATE_CLUSTER"/pparams.json \
        --tx-in-count 1 \
        --tx-out-count 1 \
        --witness-count 5 \
        --byron-witness-count 0 \
        --tx-body-file "$STATE_CLUSTER/shelley/update-proposal-alonzo-fee-tx.txbody" |
        cut -d' ' -f1)"

TXOUT_AMOUNT="$((TXIN_AMOUNT - FEE))"

cardano_cli_log transaction build-raw \
  --mary-era \
  --ttl    "$TTL" \
  --fee    "$FEE" \
  "${TXINS[@]}" \
  --tx-out "$TXIN_ADDR+$TXOUT_AMOUNT" \
  --update-proposal-file "$ALONZO_UPDATE_PROPOSAL" \
  --out-file "$STATE_CLUSTER/shelley/update-proposal-alonzo-tx.txbody"

DELEGATE_SIGNING=()
for i in $(seq 1 $NUM_BFT_NODES); do
  DELEGATE_SIGNING+=( \
    "--signing-key-file" "$STATE_CLUSTER/shelley/delegate-keys/delegate$i.skey" \
  )
done
cardano_cli_log transaction sign \
  --signing-key-file "$STATE_CLUSTER/byron/payment-keys.000-converted.skey" \
  "${DELEGATE_SIGNING[@]}" \
  --testnet-magic    "$NETWORK_MAGIC" \
  --tx-body-file     "$STATE_CLUSTER/shelley/update-proposal-alonzo-tx.txbody" \
  --out-file         "$STATE_CLUSTER/shelley/update-proposal-alonzo-tx.tx"

cardano_cli_log transaction submit \
  --tx-file "$STATE_CLUSTER/shelley/update-proposal-alonzo-tx.tx" \
  --testnet-magic "$NETWORK_MAGIC"

# give it some time before restaring the nodes so the update proposal Tx is likely to get through
echo "Waiting 15 sec before restarting the nodes"
sleep 15
NEXT_EPOCH_SLEEP_RESTART="$((NEXT_EPOCH_SLEEP - 15))"

for conf in "$STATE_CLUSTER"/config-*.json; do
  jq -r '."LastKnownBlockVersion-Major" = 5' < "$conf" > "${conf}_jq"
  cat "${conf}_jq" > "$conf"
  rm -f "${conf}_jq"
done
supervisorctl restart nodes:

echo "Waiting $NEXT_EPOCH_SLEEP_RESTART sec for Alonzo era to start"
sleep "$NEXT_EPOCH_SLEEP_RESTART"


#
# In Alonzo era
#


wait_for_era "Alonzo"

sleep "$PROPOSAL_DELAY"
echo "Submitting update proposal to update to PV6"

ALONZO_UPDATE_PROPOSAL_PV6="$STATE_CLUSTER/shelley/update-proposal-alonzo-pv6.proposal"

# protocol version + dapps parameters update
cardano_cli_log governance create-update-proposal \
  --out-file "$ALONZO_UPDATE_PROPOSAL_PV6" \
  --epoch "$(get_epoch)" \
  "${GENESIS_VERIFICATION[@]}" \
  --protocol-major-version 6 \
  --protocol-minor-version 0 \
  --max-tx-execution-units "(10000000000,11250000)" \
  --max-block-body-size 73728

cardano_cli_log query protocol-parameters \
  --testnet-magic "$NETWORK_MAGIC" \
  --out-file "$STATE_CLUSTER/pparams.json"

FEE_BUFFER=100000000
STOP_TXIN_AMOUNT=$FEE_BUFFER

TXINS=()
TXIN_COUNT=0
TXIN_AMOUNT=0
while read -r txhash txix amount _; do
  TXIN_AMOUNT="$((TXIN_AMOUNT + amount))"
  TXIN_COUNT="$((TXIN_COUNT + 1))"
  TXINS+=("--tx-in" "${txhash}#${txix}")
  if [ "$TXIN_AMOUNT" -ge "$STOP_TXIN_AMOUNT" ]; then
    break
  fi
done <<< "$(cardano_cli_log query utxo --testnet-magic \
            "$NETWORK_MAGIC" \
            --address "$TXIN_ADDR" |
            grep -E "lovelace \+ TxOutDatumNone$")"

TTL="$(get_slot 1000)"

cardano_cli_log transaction build-raw \
  --alonzo-era \
  --ttl    "$TTL" \
  --fee    0 \
  "${TXINS[@]}" \
  --tx-out "$TXIN_ADDR+0" \
  --update-proposal-file "$ALONZO_UPDATE_PROPOSAL_PV6" \
  --out-file "$STATE_CLUSTER/shelley/update-proposal-alonzo-pv6-fee-tx.txbody"

FEE="$(cardano_cli_log transaction calculate-min-fee \
        --testnet-magic "$NETWORK_MAGIC" \
        --protocol-params-file "$STATE_CLUSTER"/pparams.json \
        --tx-in-count 1 \
        --tx-out-count 1 \
        --witness-count 5 \
        --byron-witness-count 0 \
        --tx-body-file "$STATE_CLUSTER/shelley/update-proposal-alonzo-pv6-fee-tx.txbody" |
        cut -d' ' -f1)"

TXOUT_AMOUNT="$((TXIN_AMOUNT - FEE))"

cardano_cli_log transaction build-raw \
  --alonzo-era \
  --ttl    "$TTL" \
  --fee    "$FEE" \
  "${TXINS[@]}" \
  --tx-out "$TXIN_ADDR+$TXOUT_AMOUNT" \
  --update-proposal-file "$ALONZO_UPDATE_PROPOSAL_PV6" \
  --out-file "$STATE_CLUSTER/shelley/update-proposal-alonzo-pv6-tx.txbody"

DELEGATE_SIGNING=()
for i in $(seq 1 $NUM_BFT_NODES); do
  DELEGATE_SIGNING+=( \
    "--signing-key-file" "$STATE_CLUSTER/shelley/delegate-keys/delegate$i.skey" \
  )
done
cardano_cli_log transaction sign \
  --signing-key-file "$STATE_CLUSTER/byron/payment-keys.000-converted.skey" \
  "${DELEGATE_SIGNING[@]}" \
  --testnet-magic    "$NETWORK_MAGIC" \
  --tx-body-file     "$STATE_CLUSTER/shelley/update-proposal-alonzo-pv6-tx.txbody" \
  --out-file         "$STATE_CLUSTER/shelley/update-proposal-alonzo-pv6-tx.tx"

cardano_cli_log transaction submit \
  --tx-file "$STATE_CLUSTER/shelley/update-proposal-alonzo-pv6-tx.tx" \
  --testnet-magic "$NETWORK_MAGIC"

# give it some time before restaring the nodes so the update proposal Tx is likely to get through
echo "Waiting 15 sec before restarting the nodes"
sleep 15
supervisorctl restart nodes:

ALONZO_EPOCH="$(get_epoch)"

echo "Waiting $NEXT_EPOCH_SLEEP_RESTART sec for Alonzo era with PV6 to start"
sleep "$NEXT_EPOCH_SLEEP_RESTART"


#
# In Alonzo era with PV6
#

wait_for_epoch "$((ALONZO_EPOCH + 1))"

# start cardano-submit-api
if type cardano-submit-api >/dev/null; then
  echo "Starting cardano-submit-api"
  supervisorctl start submit_api
fi

cardano_cli_log query protocol-parameters \
  --testnet-magic "$NETWORK_MAGIC" \
  --out-file "$STATE_CLUSTER/pparams.json"

PROTOCOL_VERSION="$(jq ".protocolVersion.major" < "$STATE_CLUSTER/pparams.json")"

[ "$PROTOCOL_VERSION" = 6 ] || { echo "Unexpected protocol version '$PROTOCOL_VERSION' on line $LINENO" >&2; exit 1; }  # assert

sleep "$PROPOSAL_DELAY"
echo "Submitting update proposal to update to Babbage"

BABBAGE_UPDATE_PROPOSAL="$STATE_CLUSTER/shelley/update-proposal-babbage"

# protocol version + dapps parameters update
cardano_cli_log governance create-update-proposal \
  --out-file "${BABBAGE_UPDATE_PROPOSAL}.proposal" \
  --epoch "$(get_epoch)" \
  "${GENESIS_VERIFICATION[@]}" \
  --protocol-major-version 7 \
  --protocol-minor-version 0

cardano_cli_log query protocol-parameters \
  --testnet-magic "$NETWORK_MAGIC" \
  --out-file "$STATE_CLUSTER/pparams.json"

FEE_BUFFER=100000000
STOP_TXIN_AMOUNT=$FEE_BUFFER

TXINS=()
TXIN_COUNT=0
TXIN_AMOUNT=0
while read -r txhash txix amount _; do
  TXIN_AMOUNT="$((TXIN_AMOUNT + amount))"
  TXIN_COUNT="$((TXIN_COUNT + 1))"
  TXINS+=("--tx-in" "${txhash}#${txix}")
  if [ "$TXIN_AMOUNT" -ge "$STOP_TXIN_AMOUNT" ]; then
    break
  fi
done <<< "$(cardano_cli_log query utxo --testnet-magic \
            "$NETWORK_MAGIC" \
            --address "$TXIN_ADDR" |
            grep -E "lovelace \+ TxOutDatumNone$")"

TTL="$(get_slot 1000)"

cardano_cli_log transaction build-raw \
  --alonzo-era \
  --ttl    "$TTL" \
  --fee    0 \
  "${TXINS[@]}" \
  --tx-out "$TXIN_ADDR+0" \
  --update-proposal-file "${BABBAGE_UPDATE_PROPOSAL}.proposal" \
  --out-file "${BABBAGE_UPDATE_PROPOSAL}-fee-tx.txbody"

FEE="$(cardano_cli_log transaction calculate-min-fee \
        --testnet-magic "$NETWORK_MAGIC" \
        --protocol-params-file "$STATE_CLUSTER"/pparams.json \
        --tx-in-count 1 \
        --tx-out-count 1 \
        --witness-count 5 \
        --byron-witness-count 0 \
        --tx-body-file "${BABBAGE_UPDATE_PROPOSAL}-fee-tx.txbody" |
        cut -d' ' -f1)"

TXOUT_AMOUNT="$((TXIN_AMOUNT - FEE))"

cardano_cli_log transaction build-raw \
  --alonzo-era \
  --ttl    "$TTL" \
  --fee    "$FEE" \
  "${TXINS[@]}" \
  --tx-out "$TXIN_ADDR+$TXOUT_AMOUNT" \
  --update-proposal-file "${BABBAGE_UPDATE_PROPOSAL}.proposal" \
  --out-file "${BABBAGE_UPDATE_PROPOSAL}-tx.txbody"

DELEGATE_SIGNING=()
for i in $(seq 1 $NUM_BFT_NODES); do
  DELEGATE_SIGNING+=( \
    "--signing-key-file" "$STATE_CLUSTER/shelley/delegate-keys/delegate$i.skey" \
  )
done
cardano_cli_log transaction sign \
  --signing-key-file "$STATE_CLUSTER/byron/payment-keys.000-converted.skey" \
  "${DELEGATE_SIGNING[@]}" \
  --testnet-magic    "$NETWORK_MAGIC" \
  --tx-body-file     "${BABBAGE_UPDATE_PROPOSAL}-tx.txbody" \
  --out-file         "${BABBAGE_UPDATE_PROPOSAL}-tx.tx"

cardano_cli_log transaction submit \
  --tx-file "${BABBAGE_UPDATE_PROPOSAL}-tx.tx" \
  --testnet-magic "$NETWORK_MAGIC"

# give it some time before restaring the nodes so the update proposal Tx is likely to get through
echo "Waiting 15 sec before restarting the nodes"
sleep 15
supervisorctl restart nodes:

echo "Waiting $NEXT_EPOCH_SLEEP_RESTART sec for Babbage era to start"
sleep "$NEXT_EPOCH_SLEEP_RESTART"


#
# In Babbage era
#

wait_for_era "Babbage"

# update cost models when indicated
if [ -n "${UPDATE_COST_MODEL:-""}" ]; then
  sleep "$PROPOSAL_DELAY"
  echo "Submitting update proposal to update cost model in Babbage"

  COST_UPDATE_PROPOSAL="$STATE_CLUSTER/shelley/update-proposal-cost"

  # dump cost models from alonzo genesis spec - the dump can be used verbatim for update proposal
  jq -r '.costModels' < "$STATE_CLUSTER/shelley/genesis.alonzo.spec.json" \
    > "${COST_UPDATE_PROPOSAL}-values.json"

  cardano_cli_log governance create-update-proposal \
    --out-file "${COST_UPDATE_PROPOSAL}.proposal" \
    --epoch "$(get_epoch)" \
    "${GENESIS_VERIFICATION[@]}" \
    --cost-model-file "${COST_UPDATE_PROPOSAL}-values.json" \

  cardano_cli_log query protocol-parameters \
    --testnet-magic "$NETWORK_MAGIC" \
    --out-file "$STATE_CLUSTER/pparams.json"

  FEE_BUFFER=100000000
  STOP_TXIN_AMOUNT=$FEE_BUFFER

  TXINS=()
  TXIN_COUNT=0
  TXIN_AMOUNT=0
  while read -r txhash txix amount _; do
    TXIN_AMOUNT="$((TXIN_AMOUNT + amount))"
    TXIN_COUNT="$((TXIN_COUNT + 1))"
    TXINS+=("--tx-in" "${txhash}#${txix}")
    if [ "$TXIN_AMOUNT" -ge "$STOP_TXIN_AMOUNT" ]; then
      break
    fi
  done <<< "$(cardano_cli_log query utxo --testnet-magic \
              "$NETWORK_MAGIC" \
              --address "$TXIN_ADDR" |
              grep -E "lovelace \+ TxOutDatumNone$")"

  cardano_cli_log transaction build-raw \
    --babbage-era \
    --fee    0 \
    "${TXINS[@]}" \
    --tx-out "$TXIN_ADDR+0" \
    --update-proposal-file "${COST_UPDATE_PROPOSAL}.proposal" \
    --out-file "${COST_UPDATE_PROPOSAL}-fee-tx.txbody"

  FEE="$(cardano_cli_log transaction calculate-min-fee \
          --testnet-magic "$NETWORK_MAGIC" \
          --protocol-params-file "$STATE_CLUSTER"/pparams.json \
          --tx-in-count 1 \
          --tx-out-count 1 \
          --witness-count 5 \
          --byron-witness-count 0 \
          --tx-body-file "${COST_UPDATE_PROPOSAL}-fee-tx.txbody" |
          cut -d' ' -f1)"

  TXOUT_AMOUNT="$((TXIN_AMOUNT - FEE))"

  cardano_cli_log transaction build-raw \
    --babbage-era \
    --fee    "$FEE" \
    "${TXINS[@]}" \
    --tx-out "$TXIN_ADDR+$TXOUT_AMOUNT" \
    --update-proposal-file "${COST_UPDATE_PROPOSAL}.proposal" \
    --out-file "${COST_UPDATE_PROPOSAL}-tx.txbody"

  DELEGATE_SIGNING=()
  for i in $(seq 1 $NUM_BFT_NODES); do
    DELEGATE_SIGNING+=( \
      "--signing-key-file" "$STATE_CLUSTER/shelley/delegate-keys/delegate$i.skey" \
    )
  done
  cardano_cli_log transaction sign \
    --signing-key-file "$STATE_CLUSTER/byron/payment-keys.000-converted.skey" \
    "${DELEGATE_SIGNING[@]}" \
    --testnet-magic    "$NETWORK_MAGIC" \
    --tx-body-file     "${COST_UPDATE_PROPOSAL}-tx.txbody" \
    --out-file         "${COST_UPDATE_PROPOSAL}-tx.tx"

  cardano_cli_log transaction submit \
    --tx-file "${COST_UPDATE_PROPOSAL}-tx.tx" \
    --testnet-magic "$NETWORK_MAGIC"

  # give it some time before restaring the nodes so the update proposal Tx is likely to get through
  echo "Waiting 15 sec before restarting the nodes"
  sleep 15
  supervisorctl restart nodes:

  BABBAGE_EPOCH="$(get_epoch)"

  echo "Waiting $NEXT_EPOCH_SLEEP_RESTART sec for Babbage era with updated cost model"
  sleep "$NEXT_EPOCH_SLEEP_RESTART"

  wait_for_epoch "$((BABBAGE_EPOCH + 1))"

  cardano_cli_log query protocol-parameters \
    --testnet-magic "$NETWORK_MAGIC" \
    --out-file "$STATE_CLUSTER/pparams.json"

  COST_MODELS="$(jq ".costModels.PlutusScriptV2" < "$STATE_CLUSTER/pparams.json")"

  [ "$COST_MODELS" != null ] || { echo "Unexpected cost models '$COST_MODELS' on line $LINENO" >&2; exit 1; }  # assert
fi

echo "Cluster started. Run \`$SCRIPT_DIR/stop-cluster-hfc\` to stop"
