name: node_sync_tests

on:
  workflow_dispatch:
    branches:
      - sync_tests
    inputs:
      build_mode:
        description: how to get the cardano node/cli files - nix(, cabal, prebuilt)
        required: true
        default: "nix"
      tag_no1:
        description: rev_label in db/visuals (1.33.0-rc2 (tag number) or 1.33.0 (release number) or 1.33.0_PR2124 (for not released and not tagged runs with a specific node PR/version))
        required: true
        default: "None"
      node_rev1:
        description: desired cardano-node revision (used for initial sync) - cardano-node (tags/1.33.0-rc2) tag or branch
        required: true
        default: "None"
      node_topology1:
        description: desired cardano-node topology type (used for initial sync) - legacy, p2p
        required: true
        default: "legacy"
      node_start_arguments1:
        description: extra arguments to be used when starting the node using tag_no1 (--a1 --a2 21)
        required: false
        default: "None"
      tag_no2:
        description: rev_label in db/visuals (1.33.0-rc2 (tag number) or 1.33.0 (release number) or 1.33.0_PR2124 (for not released and not tagged runs with a specific node PR/version))
        required: true
        default: "None"
      node_rev2:
        description: desired cardano-node revision (used for final sync) - cardano-node (tags/1.33.0-rc2) tag or branch
        required: true
        default: "None"
      node_topology2:
        description: desired cardano-node topology type (used for final sync) - legacy, p2p
        required: true
        default: "legacy"
      node_start_arguments2:
        description: extra arguments to be used when starting the node using tag_no2 (--a1 --a2 21)
        required: false
        default: "None"
jobs:
  node_sync_test_mainnet:
    runs-on: ubuntu-latest
    steps:
      - name: trigger the Buildkite pipeline - run sync tests on Mainnet
        uses: 'buildkite/trigger-pipeline-action@v1.5.0'
        env:
          BUILDKITE_API_ACCESS_TOKEN: ${{ secrets.BUILDKITE_API_ACCESS_TOKEN }}
          PIPELINE: 'input-output-hk/qa-sync-tests'
          BRANCH: 'sync_tests'
          MESSAGE: ':github: Triggered by GitHub Action'
          AWS_DB_USERNAME: ${{ secrets.AWS_DB_USERNAME }}
          AWS_DB_PASS: ${{ secrets.AWS_DB_PASS }}
          AWS_DB_NAME: ${{ secrets.AWS_DB_NAME }}
          AWS_DB_HOSTNAME: ${{ secrets.AWS_DB_HOSTNAME }}
          BLOCKFROST_API_KEY: ${{ secrets.BLOCKFROST_API_KEY }}         
          BUILD_ENV_VARS: '{
          "env":"mainnet",
          "build_mode":"${{ github.event.inputs.build_mode }}",
          "node_rev1":"${{ github.event.inputs.node_rev1 }}",
          "node_rev2":"${{ github.event.inputs.node_rev2 }}",          
          "tag_no1":"${{ github.event.inputs.tag_no1 }}",
          "tag_no2":"${{ github.event.inputs.tag_no2 }}",
          "node_topology1":"${{ github.event.inputs.node_topology1 }}",
          "node_topology2":"${{ github.event.inputs.node_topology2 }}",
          "node_start_arguments1":"${{ github.event.inputs.node_start_arguments1 }}",
          "node_start_arguments2":"${{ github.event.inputs.node_start_arguments2 }}",
          
          "BLOCKFROST_API_KEY":"${{ secrets.BLOCKFROST_API_KEY }}",
          "AWS_DB_USERNAME":"${{ secrets.AWS_DB_USERNAME }}",
          "AWS_DB_PASS":"${{ secrets.AWS_DB_PASS }}",
          "AWS_DB_NAME":"${{ secrets.AWS_DB_NAME }}",
          "AWS_DB_HOSTNAME":"${{ secrets.AWS_DB_HOSTNAME }}"
          }'
  node_sync_test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        env: [preview, preprod]
        cabal: ["3.8.1.0"]
        ghc: ["8.10.7"]
        branch:
          - sync_tests
      fail-fast: false
    runs-on: ${{ matrix.os }}
    timeout-minutes: 600

    env:
      # Modify this value to "invalidate" the cabal cache.
      CABAL_CACHE_VERSION: "2022-12-30"

      # Modify this value to "invalidate" the secp cache.
      SECP_CACHE_VERSION: "2022-12-30"

      # current ref from: 27.02.2022
      SECP256K1_REF: ac83be33d0956faf6b7f61a60ab524ef7d6a473a

    steps:
    
      - name: Install Haskell
        if: matrix.os == 'windows-latest'
        uses: input-output-hk/setup-haskell@v1
        id: setup-haskell
        with:
          ghc-version: ${{ matrix.ghc }}
          cabal-version: ${{ matrix.cabal }}
          pacman-packages: >
            mingw-w64-x86_64-pkg-config
            mingw-w64-x86_64-libsodium
            mingw-w64-x86_64-openssl
            base-devel
            autoconf-wrapper
            autoconf
            automake
            libtool
            make

      - name: Update Windows path with executables locations
        if: runner.os == 'Windows'
        shell: pwsh
        run: $env:PATH+="D:\a\cardano-node-tests\cardano-node-tests\cardano_node_tests"
      

      - name: Install secp256k1
        if: matrix.os == 'windows-latest'
        uses: input-output-hk/setup-secp256k1@v1
        with:
          git-ref: ${{ env.SECP256K1_REF }}
          cache-version: ${{ env.SECP_CACHE_VERSION }}

      - uses: actions/checkout@v3
      - name: "[PowerShell] Add build script path"        
        if: runner.os == 'Windows'
        shell: pwsh
        run: Add-Content $env:GITHUB_PATH "$(pwd)/.github/bin"

      - name: Checkout cardano-node-tests repo
        uses: actions/checkout@v3
        with:
          path: cardano_node_tests
          ref: sync_tests

      - uses: cachix/install-nix-action@v18
        if: matrix.os != 'windows-latest'
        with:
          extra_nix_config: |
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ= iohk.cachix.org-1:DpRUyj7h7V830dp/i6Nti+NEO2/nhblbov/8MW7Rqoo=
            substituters = https://cache.nixos.org https://cache.iog.io https://iohk.cachix.org
            allow-import-from-derivation = true

      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.8

      - name: Install Python dependencies
        run: |
          pip install pymysql
          pip install requests
          pip install psutil
          pip install pandas
          pip install blockfrost-python
          pip install GitPython

      - name: Run sync test
      # ${{ (runner.os == 'Windows' && '$env:PATH=("C:\msys64\mingw64\bin;D:\a\cardano-node-tests\cardano-node-tests\cardano_node_tests\cardano-node;D:\a\cardano-node-tests\cardano-node-tests\cardano_node_tests\cardano-cli;{0}" -f $env:PATH)') || '' }}
        env:
          BLOCKFROST_API_KEY: ${{ secrets.BLOCKFROST_API_KEY }}
        run: |
          ${{ (runner.os == 'Windows' && '$env:PATH=("C:\msys64\mingw64\bin;{0}" -f $env:PATH)') || '' }}   
          cd cardano_node_tests
          echo "current branch2: $(git branch --show-current)"
          python sync_tests/node_sync_test.py -e ${{ matrix.env }} -b ${{ github.event.inputs.build_mode }} -t1 "${{ github.event.inputs.tag_no1 }}" -t2 "${{ github.event.inputs.tag_no2 }}" -r1 "${{ github.event.inputs.node_rev1 }}" -r2 "${{ github.event.inputs.node_rev2 }}" -n1 "${{ github.event.inputs.node_topology1 }}" -n2 "${{ github.event.inputs.node_topology2 }}" -a1="${{ github.event.inputs.node_start_arguments1 }}" -a2="${{ github.event.inputs.node_start_arguments2 }}"
      
      - name: Write the test results into the database
        env:
          AWS_DB_USERNAME: ${{ secrets.AWS_DB_USERNAME }}
          AWS_DB_PASS: ${{ secrets.AWS_DB_PASS }}
          AWS_DB_NAME: ${{ secrets.AWS_DB_NAME }}
          AWS_DB_HOSTNAME: ${{ secrets.AWS_DB_HOSTNAME }}
          BLOCKFROST_API_KEY: ${{ secrets.BLOCKFROST_API_KEY }}
        run: |
          cd cardano_node_tests
          echo "current branch3: $(git branch --show-current)"
          python sync_tests/node_write_sync_values_to_db.py -e ${{ matrix.env }}
      
      - name: Generate artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: node_logs_${{ matrix.env }}_${{ matrix.os }}
          path: |
            cardano_node_tests/logfile.log
            cardano_node_tests/sync_results.json
            cardano_node_tests/${{ matrix.env }}-config.json
            cardano_node_tests/${{ matrix.env }}-topology.json